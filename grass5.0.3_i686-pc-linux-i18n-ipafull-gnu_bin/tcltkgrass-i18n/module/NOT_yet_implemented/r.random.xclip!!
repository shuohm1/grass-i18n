

proc raster_output { } {


  toplevel .raster_output

  wm geometry .raster_output +100+20
  wm title .raster_output "raster_output"


  global rname


  frame .raster_output.frame0 \
    -relief {flat}

  label .raster_output.frame0.label \
    -anchor {w} \
    -text {New raster map layer to hold program output:} \
    -padx {2}

  scrollbar .raster_output.frame0.hscrollbar \
    -command {.raster_output.frame0.entry xview} \
    -orient {horizontal}

  entry .raster_output.frame0.entry \
    -relief {sunken} \
    -width 50 \
    -xscrollcommand {.raster_output.frame0.hscrollbar set}

  pack append .raster_output.frame0 \
    .raster_output.frame0.label { top fillx } \
    .raster_output.frame0.entry { top fillx } \
    .raster_output.frame0.hscrollbar { bottom fillx }

  .raster_output.frame0.entry configure -state normal

  bind .raster_output.frame0.entry <Return> {
       set rname [%W get] }



  frame .raster_output.frame1 \
     -borderwidth {2}

  button .raster_output.frame1.ok \
     -text Ok \
     -relief raised \
     -padx 10 \
     -command {
                  set rname [.raster_output.frame0.entry get]
                 destroy .raster_output }

  button .raster_output.frame1.cancel \
     -text Cancel \
     -relief raised \
     -padx 10 \
     -command {
                  set rname ""
                 destroy .raster_output }

  pack append .raster_output.frame1 \
    .raster_output.frame1.ok { left expand } \
    .raster_output.frame1.cancel { right expand }



  pack append .raster_output \
    .raster_output.frame0 { top expand fill } \
    .raster_output.frame1 { bottom expand fill }



  grab set .raster_output
  tkwait window .raster_output

}




proc sites_output { } {


  toplevel .sites_output

  wm geometry .sites_output +100+20
  wm title .sites_output "sites_output"


  global sname


  frame .sites_output.frame0 \
    -relief {flat}

  label .sites_output.frame0.label \
    -anchor {w} \
    -text {New GRASS sites list file to hold program output:} \
    -padx {2}

  scrollbar .sites_output.frame0.hscrollbar \
    -command {.sites_output.frame0.entry xview} \
    -orient {horizontal}

  entry .sites_output.frame0.entry \
    -relief {sunken} \
    -width 50 \
    -xscrollcommand {.sites_output.frame0.hscrollbar set}

  pack append .sites_output.frame0 \
    .sites_output.frame0.label { top fillx } \
    .sites_output.frame0.entry { top fillx } \
    .sites_output.frame0.hscrollbar { bottom fillx }

  .sites_output.frame0.entry configure -state normal

  bind .sites_output.frame0.entry <Return> {
       set sname [%W get] }



  frame .sites_output.frame1 \
     -borderwidth {2}

  button .sites_output.frame1.ok \
     -text Ok \
     -relief raised \
     -padx 10 \
     -command {
                  set sname [.sites_output.frame0.entry get]
                 destroy .sites_output }

  button .sites_output.frame1.cancel \
     -text Cancel \
     -relief raised \
     -padx 10 \
     -command {
                  set sname ""
                 destroy .sites_output }

  pack append .sites_output.frame1 \
    .sites_output.frame1.ok { left expand } \
    .sites_output.frame1.cancel { right expand }



  pack append .sites_output \
    .sites_output.frame0 { top expand fill } \
    .sites_output.frame1 { bottom expand fill }



  grab set .sites_output
  tkwait window .sites_output

}




proc flags { } {


  toplevel .flags

  wm geometry .flags +100+20
  wm title .flags "flags"


  global q


  frame .flags.frame0 \
    -relief {flat}

  checkbutton .flags.frame0.checkbutton \
     -text "Run quietly by suppressing the output of messages." \
     -relief flat \
     -anchor {w} \
     -onvalue "q" \
     -offvalue "" \
     -variable q

  pack append .flags.frame0 \
    .flags.frame0.checkbutton { left }

  global z


  frame .flags.frame1 \
    -relief {flat}

  checkbutton .flags.frame1.checkbutton \
     -text "Include areas assigned a category value of zero." \
     -relief flat \
     -anchor {w} \
     -onvalue "z" \
     -offvalue "" \
     -variable z

  pack append .flags.frame1 \
    .flags.frame1.checkbutton { left }


  frame .flags.frame2 \
     -borderwidth {2}

  button .flags.frame2.ok \
     -text Ok \
     -relief raised \
     -padx 10 \
     -command {
                 destroy .flags }

  button .flags.frame2.cancel \
     -text Cancel \
     -relief raised \
     -padx 10 \
     -command {
                 destroy .flags }

  pack append .flags.frame2 \
    .flags.frame2.ok { left expand } \
    .flags.frame2.cancel { right expand }


bind .flags.frame0.checkbutton <Return> {
     focus .flags.frame1.checkbutton
}

bind .flags.frame1.checkbutton <Return> {
     focus .flags.frame0.checkbutton
}


  pack append .flags \
    .flags.frame0 { top expand fill } \
    .flags.frame1 { top expand fill } \
    .flags.frame2 { bottom expand fill }



  grab set .flags
  tkwait window .flags

}




proc put_command { } {


  global q
  global z
  global iname
  global number
  global percent
  global rname
  global sname


  set cmd ""

  if {  $q != "" || $z != "" } {
         set cmd "$cmd -$q$z"
  }

  if {  $iname != "" } {
         set cmd "$cmd input=$iname"
  }

  if {  $number != "" || $percent != "" } {
         set cmd "$cmd nsites=$number,$percent"
  }

  if {  $rname != "" } {
         set cmd "$cmd raster_output=$rname"
  }

  if {  $sname != "" } {
         set cmd "$cmd sites_output=$sname"
  }

  if { $cmd != "" } {
     set cmd "r.random $cmd"
  }
}




proc set_command_entry { } {

  .cmd.frame0.entry configure -state normal
  .cmd.frame0.entry delete 0 end
  .cmd.frame0.entry insert 0 [put_command]
  .cmd.frame0.entry configure -state disabled

}


proc proc_r.random { } {


  global q
  global z
  global iname
  global number
  global percent
  global rname
  global sname


  toplevel .cmd

  wm geometry .cmd +100+20

  wm title .cmd "Create a Raster Map Layer and Sites List File Containing Randomly Located Sites"


  frame .cmd.frame0 \
    -relief {flat}

  label .cmd.frame0.label \
    -anchor {w} \
    -text {Command:} \
    -padx {2}

  scrollbar .cmd.frame0.hscrollbar \
    -command {.cmd.frame0.entry xview} \
    -orient {horizontal}

  entry .cmd.frame0.entry \
    -relief {sunken} \
    -width 50 \
    -xscrollcommand {.cmd.frame0.hscrollbar set}

  pack append .cmd.frame0 \
    .cmd.frame0.label { top fillx } \
    .cmd.frame0.entry { top fillx } \
    .cmd.frame0.hscrollbar { bottom fillx }

  .cmd.frame0.entry delete 0 end
  .cmd.frame0.entry insert 0 {r.random}

  .cmd.frame0.entry configure -state disabled



  frame .cmd.frame1 \
    -relief {flat}

  label .cmd.frame1.label \
    -anchor {w} \
    -text {Description:} \
    -padx {2}

  scrollbar .cmd.frame1.hscrollbar \
    -command {.cmd.frame1.entry xview} \
    -orient {horizontal}

  entry .cmd.frame1.entry \
    -relief {sunken} \
    -width 50 \
    -xscrollcommand {.cmd.frame1.hscrollbar set}

  pack append .cmd.frame1 \
    .cmd.frame1.label { top fillx } \
    .cmd.frame1.entry { top fillx } \
    .cmd.frame1.hscrollbar { bottom fillx }

  .cmd.frame1.entry delete 0 end
  .cmd.frame1.entry insert 0 {r.random creates a raster map layer and sites list file containing randomly located sites.}

  .cmd.frame1.entry configure -state disabled



  frame .cmd.frame2 \
    -relief {flat}

  label .cmd.frame2.label \
    -anchor {w} \
    -text {Raster map layer to be used as input:} \
    -padx {2}

  scrollbar .cmd.frame2.hscrollbar \
    -command {.cmd.frame2.entry xview} \
    -orient {horizontal}

  entry .cmd.frame2.entry \
    -relief {sunken} \
    -width 50 \
    -xscrollcommand {.cmd.frame2.hscrollbar set}

  pack append .cmd.frame2 \
    .cmd.frame2.label { top fillx } \
    .cmd.frame2.entry { top fillx } \
    .cmd.frame2.hscrollbar { bottom fillx }

  .cmd.frame2.entry configure -state normal

  bind .cmd.frame2.entry <Return> {
       set iname [%W get] }



  frame .cmd.frame3 \
    -relief {flat}

  label .cmd.frame3.label \
    -anchor {w} \
    -text {Number of sites to be randomly generated:} \
    -padx {2}

  scrollbar .cmd.frame3.hscrollbar \
    -command {.cmd.frame3.entry xview} \
    -orient {horizontal}

  entry .cmd.frame3.entry \
    -relief {sunken} \
    -width 50 \
    -xscrollcommand {.cmd.frame3.hscrollbar set}

  pack append .cmd.frame3 \
    .cmd.frame3.label { top fillx } \
    .cmd.frame3.entry { top fillx } \
    .cmd.frame3.hscrollbar { bottom fillx }

  .cmd.frame3.entry configure -state normal

  bind .cmd.frame3.entry <Return> {
       set number [%W get] }



  frame .cmd.frame4 \
    -relief {flat}

  label .cmd.frame4.label \
    -anchor {w} \
    -text {Percentage} \
    -padx {2}

  scrollbar .cmd.frame4.hscrollbar \
    -command {.cmd.frame4.entry xview} \
    -orient {horizontal}

  entry .cmd.frame4.entry \
    -relief {sunken} \
    -width 50 \
    -xscrollcommand {.cmd.frame4.hscrollbar set}

  pack append .cmd.frame4 \
    .cmd.frame4.label { top fillx } \
    .cmd.frame4.entry { top fillx } \
    .cmd.frame4.hscrollbar { bottom fillx }

  .cmd.frame4.entry configure -state normal

  bind .cmd.frame4.entry <Return> {
       set percent [%W get] }



  frame .cmd.frame5 \
    -relief {flat}

  label .cmd.frame5.label \
    -anchor {w} \
    -text {Other options available:} \
    -padx {2}

  button .cmd.frame5.button0 \
     -text "raster_output ..." \
     -relief raised \
     -padx 10 \
     -command "raster_output
                set_command_entry"


  button .cmd.frame5.button1 \
     -text "sites_output ..." \
     -relief raised \
     -padx 10 \
     -command "sites_output
                set_command_entry"


  button .cmd.frame5.button2 \
     -text "flags ..." \
     -relief raised \
     -padx 10 \
     -command "flags
                set_command_entry"


  frame .cmd.frame6 \
     -borderwidth {2}

  button .cmd.frame6.ok \
     -text Ok \
     -relief raised \
     -padx 10 \
     -command { 
		if {  $iname != "" && $number != "" && $percent != "" } {
 		set cmd [put_command]
 		if { $cmd != "" } {
 		   eval " exec xterm -title r.random -geometry 50x5 -exec $cmd " 
 		   destroy .cmd
 		}
 	}
 }

  button .cmd.frame6.cancel \
     -text Cancel \
     -relief raised \
     -padx 10 \
     -command { destroy .cmd }

  pack append .cmd.frame6 \
    .cmd.frame6.ok { left expand } \
    .cmd.frame6.cancel { right expand }

  pack append .cmd.frame5 \
    .cmd.frame5.label { top fillx } \
    .cmd.frame5.button0 { left } \
    .cmd.frame5.button1 { left } \
    .cmd.frame5.button2  { left }



  pack append .cmd \
    .cmd.frame1 { top expand fill } \
    .cmd.frame2 { top expand fill } \
    .cmd.frame3 { top expand fill } \
    .cmd.frame4 { top expand fill } \
    .cmd.frame5 { top expand fill } \
    .cmd.frame0 { top expand fill } \
    .cmd.frame6 { bottom expand fill }


bind .cmd.frame2.entry <KeyRelease> {
		set iname [.cmd.frame2.entry get]
		set_command_entry
}

bind .cmd.frame2.entry <Return> {
		set iname [.cmd.frame2.entry get]
		set_command_entry
}

bind .cmd.frame3.entry <KeyRelease> {
		set number [.cmd.frame3.entry get]
		set_command_entry
}

bind .cmd.frame3.entry <Return> {
		set number [.cmd.frame3.entry get]
		set_command_entry
}

bind .cmd.frame4.entry <KeyRelease> {
		set percent [.cmd.frame4.entry get]
		set_command_entry
}

bind .cmd.frame4.entry <Return> {
		set percent [.cmd.frame4.entry get]
		set_command_entry
}

  grab set .cmd
  tkwait window .cmd

}

global q
set q ""

global z
set z ""

global iname
set iname ""

global number
set number ""

global percent
set percent ""

global rname
set rname ""

global sname
set sname ""


global database
global location
global mapset
global feature
if { [info exists env(GISDBASE)] == 0 ||
     [info exists env(LOCATION_NAME)] == 0 ||
     [info exists env(MAPSET)] == 0 } {
   puts stdout "GISDBASE, LOCATION_NAME and MAPSET must be set !!!"
   return
}
set database $env(GISDBASE)
set location $env(LOCATION_NAME)
set mapset $env(MAPSET)
set feature ""

proc_r.random
