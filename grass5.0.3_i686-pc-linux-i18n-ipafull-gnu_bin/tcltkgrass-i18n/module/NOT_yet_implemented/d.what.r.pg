proc DrawTable { answer } {
  toplevel .message
  global tuple
  global rows
  global cols
  global a
  set a $answer
  
  wm geometry .message +300+100
  wm title .message ShowQuery

  set cols [llength [lindex $a 1]]
  set rows [llength $a]
  set rows [expr $rows - 1]
  set tuple 1
  loop c 0 $cols 1 {
  frame .message.frame$c \
    -borderwidth {2} \
    -height {1} \
    -relief {raised} \
    -width {500}

  entry .message.frame$c.entry \
    -font {-adobe-helvetica-medium-r-normal--12-120-75-75-p-67-iso8859-1} \
    -borderwidth {4} \
    -relief {ridge} \
    -width {44}

	  label .message.frame$c.label \
	    -font {-adobe-helvetica-bold-r-normal--14-100-100-100-p-82-iso8859-1} \
	    -width {21} \
	    -text [lindex [lindex $a 0] $c]

	  pack .message.frame$c.entry -side right
	  pack .message.frame$c.label -side left
	  pack append .message .message.frame$c {top frame center}
  }
  loop c 0 $cols 1 {
	.message.frame$c.entry delete 0 end
	.message.frame$c.entry insert end [lindex [lindex $a $tuple] $c]
  }

  frame .message.menu

  button .message.menu.close -text Close -command {destroy .message}

  button .message.menu.next -text Next -state disabled -command {
	if {$tuple < $rows } {
	  set tuple [expr $tuple + 1]
	  loop c 0 $cols 1 {
		.message.frame$c.entry delete 0 end
		.message.frame$c.entry insert end [lindex [lindex $a $tuple] $c]
		if {$rows > 1} {
			.message.menu.prev configure -state normal
		}			
		if {$tuple == $rows } {
	  		.message.menu.next configure -state disabled
		}
 	 }
       }
  }
  button .message.menu.prev -text Prev -state disabled -command { 
	if {$tuple > 1} {
	  set tuple [expr $tuple - 1]
	  loop c 0 $cols 1 {
		.message.frame$c.entry delete 0 end
		.message.frame$c.entry insert end [lindex [lindex $a $tuple] $c]
  	  }
		if {$rows > 1} {
			.message.menu.next configure -state normal
		}			
		if {$tuple == 1 } {
	  		.message.menu.prev configure -state disabled
		}
 	}
  }

  if {$rows > 1} {
	.message.menu.next configure -state normal
  }
  pack .message.menu.next .message.menu.prev .message.menu.close \
	-side left
  pack append .message .message.menu {top frame center}

}

proc MakeQuery {table col map} {
	global redraw
	toplevel .message
	wm geometry .message +300+100
	wm title .message message
	
	label .message.label -text {Please, click a point on a map}	
	
	if {$redraw == 1} {
		set redraw 0
#		exec d.rast map=$map
	}
	pack .message.label
	update
	catch {exec d.what.rast -1t map=$map fs=\ } answer
	set categ [lindex $answer 4]
	catch {exec g.gisenv PG_DBASE} db
	set query "retrieve ($table.all) where $table.$col = $categ"
#	puts $query
	set answer [PQquery $db $query]
	destroy .message
#	puts $answer
	DrawTable $answer
	tkwait window .message

}
proc DB_listtables {} {
	global file_name
	toplevel .files2
	wm geometry .files2 +100+100
	wm title .files2 "Tables"

	frame .files2.frame0 \
	    -borderwidth {2} \
	    -relief {flat}
	frame .files2.frame1

	listbox .files2.frame0.listbox \
	    -relief {sunken} \
	    -geometry 20x10 \
	    -yscrollcommand {.files2.frame0.vscrollbar set}

	  scrollbar .files2.frame0.vscrollbar \
	    -command {.files2.frame0.listbox yview}
	 button .files2.frame1.close -text "Close" -command {
		destroy .files2
	 }
	 button .files2.frame1.ok -text " Ok " -command {
                set file_name [selection get]
		destroy .files2
	 }

	  pack append .files2.frame0 \
	    .files2.frame0.listbox { left expand fill } \
	    .files2.frame0.vscrollbar { right fill }

#	  set db [exec g.gisenv PG_DBASE]
	  catch {exec g.gisenv PG_DBASE} db

	  label .files2.label -text "Database: $db"
	  set first 1
	  if { $db != ""} {
	     foreach i [ PQquery $db {retrieve ( pg.relname ) from pg in pg_class where pg.relkind != "i" and pg.relname !~ "pg_" sort by relname } ] {
     	        if { $first == 1 } {
			set first 0
		} else {
	           .files2.frame0.listbox insert end $i
	  	}
	     }
	  } else {
		.files2.frame0.listbox insert {Please,}
		.files2.frame0.listbox insert {select the database}
		.files2.frame0.listbox insert {first !}
	  }
	  pack append .files2.frame1 \
		.files2.frame1.close {left fill} \
		.files2.frame1.ok {right fill}
	  pack .files2.label
	  pack .files2.frame0 
	  pack .files2.frame1
        bind .files2.frame0.listbox <Double-ButtonPress-1> {
                set file_name [selection get]
                destroy .files2
        }
        tkwait window .files2
        return $file_name

}

proc DB_listcolumns {table} {
  if { $table != "" } {
	global file_name
	toplevel .files
	wm geometry .files +100+100
	wm title .files Columns
	
	frame .files.frame0 \
	    -borderwidth {2} \
	    -relief {flat}

	frame .files.frame1

	listbox .files.frame0.listbox \
	    -relief {sunken} \
	    -geometry 20x10 \
	    -yscrollcommand {.files.frame0.vscrollbar set}

	  scrollbar .files.frame0.vscrollbar \
	    -command {.files.frame0.listbox yview}

	 button .files.frame1.close -text "Close" -command {
		destroy .files
	 }
	 button .files.frame1.ok -text " Ok " -command {
                set file_name [selection get]
		destroy .files
	 }


	  pack append .files.frame0 \
	    .files.frame0.listbox { left expand fill } \
	    .files.frame0.vscrollbar { right fill }
#	  pack .files.close
#	  pack .files.frame0

          catch {exec g.gisenv PG_DBASE} db
 
          label .files.label -text "Database: $db  Table: $table"
      
	  set query "retrieve (pg_attribute.attname) \
		where  pg_class.relname = \"$table\" \
		and pg_attribute.attrelid=pg_class.oid \
		and   pg_attribute.attnum   > 0 \
		sort   by attname "
#	  puts $query
	  set first 1
 	  foreach i [ PQquery $db $query ] {
	     if {$first == 1 } {
		set first 0
	     } else {
	        .files.frame0.listbox insert end $i
	     }
	  }	

        bind .files.frame0.listbox <Double-ButtonPress-1> {
                set file_name [selection get]
                destroy .files
	}

	  pack append .files.frame1 \
		.files.frame1.close {left fill} \
		.files.frame1.ok {right fill}

	pack .files.label
	pack .files.frame0
	pack .files.frame1

	tkwait window .files
	return $file_name
  } else {
	return ""
  }
}

proc get_feature { type } {

  set dir ""
  case $type in {

       {raster} {
                      set dir "cell"
                  }

       {vector} {
                      set dir "dig"
                  }

       {sites} {
                      set dir "site_lists"
                  }

       {label} {
                      set dir "paint/labels"
                  }

       {group} {
                      set dir "group"
                  }

       {icon} {
                      set dir "paint/icons"
                  }

       {region} {
                      set dir "windows"
                  }

       {dlg} {
                      set dir "dlg"
                  }

       {dlg_ascii} {
                      set dir "dlg_ascii"
                  }

  }
  return $dir

}

proc put_list { the_listbox the_list } {

  $the_listbox delete 0 end
  foreach i $the_list {
      $the_listbox insert end $i
  }
}

proc get_list { path } {
  set list ""
  if { [file isdirectory $path] != 1 } {
     return $list
  }
  set current_dir [exec pwd]
  cd $path
  foreach i [exec ls -a [exec pwd]] {
     if { [string compare $i "."] != 0 && [string compare $i ".."] != 0 } {
        lappend list $i
     }
  }
  cd $current_dir
  return $list
}


proc mapset_listbox { type } {

  global database
  global location
  global mapset
  global feature
  global tcltkgrassbase
  global file_name

  set file_name ""

  toplevel .mapset

  wm geometry .mapset +100+100
  wm title .mapset {spatial layer}

  set feature [get_feature $type]

  global mapset_list

  frame .mapset.frame0 \
    -borderwidth {2} \
    -relief {flat}

  label .mapset.frame0.label \
    -anchor {w} \
    -text "Mapset"

  entry .mapset.frame0.mapset \
    -relief {sunken} \
   -width 20
 global tcltkgrassbase 
  menubutton .mapset.frame0.mapsets \
    -bitmap @$tcltkgrassbase/bitmap/arrow \
    -menu {.mapset.frame0.mapsets.pulldown}

  menu .mapset.frame0.mapsets.pulldown

  set mapset_list [get_list "$database/$location"]
  foreach i $mapset_list {
      .mapset.frame0.mapsets.pulldown add command \
          -label $i \
          -command {
                     set mapset [lindex $mapset_list \
                               [.mapset.frame0.mapsets.pulldown index active] ]
                     .mapset.frame0.mapset delete 0 end
                     .mapset.frame0.mapset insert 0 $mapset
                     put_list .mapset.frame1.listbox \
                         [get_list "$database/$location/$mapset/$feature"]
                     set file_name ""
                   }
  }

  pack append .mapset.frame0 \
    .mapset.frame0.label { left } \
    .mapset.frame0.mapset { left } \
    .mapset.frame0.mapsets { right }

  frame .mapset.frame1 \
    -borderwidth {2} \
    -relief {raised}

  listbox .mapset.frame1.listbox \
    -relief {sunken} \
    -geometry 20x10 \
    -yscrollcommand {.mapset.frame1.vscrollbar set}
  scrollbar .mapset.frame1.vscrollbar \
    -command {.mapset.frame1.listbox yview}

  pack append .mapset.frame1 \
    .mapset.frame1.listbox { left expand fill } \
    .mapset.frame1.vscrollbar { right fill }

  frame .mapset.frame2 \
    -borderwidth {2}

  frame .mapset.frame2.frame

  button .mapset.frame2.frame.ok \
     -text Ok \
     -relief raised \
     -padx 10 \
     -command { if { $file_name != "" } {
                   destroy .mapset
               }
              }

  button .mapset.frame2.frame.cancel \
    -text Cancel \
    -relief raised \
    -padx 10 \
    -command { set file_name ""
               destroy .mapset
             }

  pack append .mapset.frame2.frame \
    .mapset.frame2.frame.ok { left expand } \
    .mapset.frame2.frame.cancel { right expand }

  pack append .mapset.frame2 \
    .mapset.frame2.frame { bottom frame center fill }

  pack append .mapset \
    .mapset.frame0 { top expand fill } \
    .mapset.frame1 { top expand fill } \
    .mapset.frame2 { bottom expand fill }

  bind .mapset.frame1.listbox <Button-1> {
        %W select from [%W nearest %y]
        %W select to [%W nearest %y]
	    set file_name [%W get [%W nearest %y]]
  }

  bind .mapset.frame1.listbox <ButtonRelease-1> {
        %W select from [%W nearest %y]
        %W select to [%W nearest %y]
	    set file_name [%W get [%W nearest %y]]
  }

  bind .mapset.frame1.listbox <Double-ButtonPress-1> {
        %W select from [%W nearest %y]
        %W select to [%W nearest %y]
	    set file_name [%W get [%W nearest %y]]
  }

  .mapset.frame0.mapset delete 0 end
  .mapset.frame0.mapset insert 0 $mapset

  .mapset.frame1.listbox delete 0 end
  put_list .mapset.frame1.listbox \
             [get_list "$database/$location/$mapset/$feature"]
  grab set .mapset
  tkwait window .mapset

  return $file_name

}


proc put_command { } {



  global name1
  global name2
  global name3
  global name4
  global name5

  set cmd ""

  if { $name1 != "" } {
         set cmd "$cmd tab=$name1"
  }

#  if { $name2 != "" } {
#         set cmd "$cmd key=$name2"
#  }
  if { $name3 != "" } {
        set cmd "$cmd col=$name3"
  }
  if { $name4 != "" } {
         set cmd "$cmd map=$name4"
  }
#  if { $name5 != "" } {
#         set cmd "$cmd output=$name5"
#  }


  if { $cmd != "" } {
     set cmd "d.what.r.pg  $cmd"
  }
}

proc set_command_entry {} {

   .cmd.frame.frame6.entry configure -state normal
   .cmd.frame.frame6.entry delete 0 end
   .cmd.frame.frame6.entry insert 0 [put_command]
   .cmd.frame.frame6.entry configure -state disabled

}

# procedure to show window .
proc proc_d.what.r.pg { } {# xf ignore me 7

  # Window manager configurations


  global name1
  global name2
  global name3
  global name4
  global name5

  toplevel .cmd

  wm geometry .cmd +100+20

  wm title .cmd "d.what.r.pg  j.soimasuo"


  # build widget .cmd.frame
  frame .cmd.frame \
    -borderwidth {2} \
    -height {360} \
    -width {350}

  # build widget .cmd.frame.label
  label .cmd.frame.label \
    -text {Description:}
  label .cmd.frame.label2 \
	-text {Displays the values of a table associated with raster}


  # build widget .cmd.frame.frame1
  frame .cmd.frame.frame1 \
    -borderwidth {2} \
    -geometry {30x30} \
    -relief {raised}

  # build widget .cmd.frame.frame1.label
  label .cmd.frame.frame1.label \
    -text {Table:}

  # build widget .cmd.frame.frame1.entry
  entry .cmd.frame.frame1.entry \
    -borderwidth {3} \
    -relief {sunken}

  button .cmd.frame.frame1.button \
    -text {table} \
    -command { set file [DB_listtables ]
                if { $file != "" } {
                   set name1 $file
                   .cmd.frame.frame1.entry delete 0 end
                   .cmd.frame.frame1.entry insert 0 $file
                   set_command_entry
                }
             }


  bind .cmd.frame.frame1.entry <Return> {
       set name1 [%W get]
       set_command_entry  }

  # place
  place .cmd.frame.frame1.button -x 300 -y 30 -anchor nw

  # place
  place .cmd.frame.frame1.label -x 0 -y 0 -anchor nw

  # place
  place .cmd.frame.frame1.entry -x 0 -y 30 -width 300 -anchor nw


  # build widget .cmd.frame.frame1
  frame .cmd.frame.frame3 \
    -borderwidth {2} \
    -geometry {30x30} \
    -relief {raised}


  # build widget .cmd.frame.frame3.label
  label .cmd.frame.frame3.label \
    -text { Column associated with raster values:}

  # build widget .cmd.frame.frame3.entry
  entry .cmd.frame.frame3.entry \
    -borderwidth {3} \
    -relief {sunken}

  button .cmd.frame.frame3.button \
    -text {columns} \
    -command { set file [DB_listcolumns	$name1 ]
                if { $file != "" } {
                   set name3 $file
                   .cmd.frame.frame3.entry delete 0 end
                   .cmd.frame.frame3.entry insert 0 $file
                   set_command_entry
                }
             }


  bind .cmd.frame.frame3.entry <Return> {
       set name3 [%W get]
       set_command_entry  }

  # place
  place .cmd.frame.frame3.button -x 300 -y 30 -anchor nw

  # place
  place .cmd.frame.frame3.label -x 0 -y 0 -anchor nw

  # place
  place .cmd.frame.frame3.entry -x 0 -y 30 -width 300 -anchor nw

  # build widget .cmd.frame.frame4
  frame .cmd.frame.frame4 \
    -borderwidth {2} \
    -geometry {30x30} \
    -relief {raised}

  # build widget .cmd.frame.frame4.label
  label .cmd.frame.frame4.label \
    -text {Name of raster map associated with database.:}

  # build widget .cmd.frame.frame4.entry
  entry .cmd.frame.frame4.entry \
    -borderwidth {3} \
    -relief {sunken}

  button .cmd.frame.frame4.button \
    -text {raster} \
    -command { set file [mapset_listbox raster]
                if { $file != "" } {
                   set name4 $file
                   .cmd.frame.frame4.entry delete 0 end
                   .cmd.frame.frame4.entry insert 0 $file
                   set_command_entry
                }
             }


  bind .cmd.frame.frame4.entry <Return> {
       set name4 [%W get]
       set_command_entry  }

  # place
  place .cmd.frame.frame4.button -x 300 -y 30 -anchor nw

  # place
  place .cmd.frame.frame4.label -x 0 -y 0 -anchor nw

  # place
  place .cmd.frame.frame4.entry -x 0 -y 30 -width 300 -anchor nw



  # build widget .cmd.frame.frame6
  frame .cmd.frame.frame6 \
    -borderwidth {2} \
    -geometry {30x30} \
    -relief {raised}

  # build widget .cmd.frame.frame6.label
  label .cmd.frame.frame6.label \
    -text {Command:}

  # build widget .cmd.frame.frame4.entry
  entry .cmd.frame.frame6.entry \
    -borderwidth {3} \
    -relief {sunken}

  .cmd.frame.frame6.entry delete 0 end
  .cmd.frame.frame6.entry insert 0 {d.what.r.pg}

  .cmd.frame.frame6.entry configure -state disabled

  # place
  place .cmd.frame.frame6.label -x 0 -y 0 -anchor nw

  # place
  place .cmd.frame.frame6.entry -x 0 -y 30 -width 300 -anchor nw


  # build widget .cmd.frame.button1
  button .cmd.frame.button1 \
    -text {Query} \
    -width {8} \
     -command { set name1 [.cmd.frame.frame1.entry get]
	 	set name3 [.cmd.frame.frame3.entry get]
	 	set name4 [.cmd.frame.frame4.entry get]
  		set cmd [put_command]
 		if { ($name1 != "") && ($name3 != "") && ($name4 != "") } {
# 		   catch { eval " exec $cmd " } 
		   MakeQuery $name1 $name3 $name4
# 		   destroy .cmd
 		}
 	}

  # build widget .cmd.frame.button2
  button .cmd.frame.button2 \
    -text {Close} \
    -command { destroy .cmd } \
    -width {8}



  # place
  place .cmd.frame.frame6 -x 0 -y 245 -width 347 -height 65 -anchor nw

  # place
  place .cmd.frame.button1 -x 56 -y 320 -anchor nw

  # place
  place .cmd.frame.button2 -x 220 -y 320 -anchor nw

  # place
  place .cmd.frame.frame4 -x 0 -y 180 -width 347 -height 65 -anchor nw

  # place
  place .cmd.frame.frame3 -x 0 -y 115 -width 347 -height 65 -anchor nw

  # place
  place .cmd.frame.frame1 -x 0 -y 50 -width 347 -height 65 -anchor nw

 

  # place
  place .cmd.frame.label -x 0 -y 0 -anchor nw
  place .cmd.frame.label2 -x 0 -y 20 -anchor nw
 

  # pack widget .
  pack append .cmd \
    .cmd.frame {top frame center}



#  .cmd.frame.frame1.entry insert end MH_Hyry
#  .cmd.frame.frame3.entry insert end suoryhma
#  .cmd.frame.frame4.entry insert end loh8.paapl

  if {"[info procs XFEdit]" != ""} {
    catch "XFMiscBindWidgetTree ."
    after 2 "catch {XFEditSetShowWindows}"
  }
}


global name1
set name1 ""
global name2
set name2 ""
global name3
set name3 ""
global name4
set name4 ""
global name5
set name5 ""
global tuple

global tcltkgrassbase
global database
global location
global mapset
global feature
set auto_path "$tcltkgrassbase/module  $auto_path"
if { [info exists env(GISDBASE)] == 0 ||
     [info exists env(LOCATION_NAME)] == 0 ||
     [info exists env(MAPSET)] == 0 } {
   puts stdout "GISDBASE, LOCATION_NAME and MAPSET must be set !!!"
   return
}
set database $env(GISDBASE)
set location $env(LOCATION_NAME)
set mapset $env(MAPSET)
set feature ""

set redraw 1

proc_d.what.r.pg
