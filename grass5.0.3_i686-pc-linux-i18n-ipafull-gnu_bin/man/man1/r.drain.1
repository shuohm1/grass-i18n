r.drain(1)                    Grass User's Manual                   r.drain(1)



NNAAMMEE
       rr..ddrraaiinn   -  Traces  a  flow through an elevation model on a raster map
       layer.
       _(_G_R_A_S_S _R_a_s_t_e_r _P_r_o_g_r_a_m_)

SSYYNNOOPPSSIISS
       rr..ddrraaiinn
       rr..ddrraaiinn hheellpp
       rr..ddrraaiinn   [--cc]    [--aa]    [--nn]    iinnppuutt==_n_a_m_e    oouuttppuutt==_n_a_m_e    [ccoooorrddii--
       nnaattee==_x_,_y[,_x_,_y,...]]

DDEESSCCRRIIPPTTIIOONN
       _r_._d_r_a_i_n  traces a flow through a least-cost path in an elevation model.
       The _e_l_e_v_a_t_i_o_n surface (a raster map layer input) might be  the  cumula-
       tive cost map generated by the _r_._c_o_s_t program.  The _o_u_t_p_u_t result (also
       a raster map layer) will show one or more least-cost paths between each
       user-provided location(s) and the low spot (low category values) in the
       input model. By default, the output will be an integer cell map with  _1
       along the least cost path, and null cells elsewhere.

        With  the --cc (_c_o_p_y) flag, the input map cells values are copied verba-
       tim along the path. With the  --aa  (_a_c_c_u_m_u_l_a_t_e)  flag,  the  accumulated
       cells  value  from the starting point up to the current cell is written
       on output. With the --cc and the --aa flags,  the  output  map  is  created
       withe the same cell type than the input map (integer, float or double).
       The --cc and --aa flags are mutually incompatible. If both  are  specified,
       the  --aa  flag will superceed the --cc flag, and a warning message will be
       issued.  With the --nn (_n_u_m_b_e_r) flag, the cells  are  numbered  from  the
       starting point to the final point.


       The path is calculated by choosing the stepper "slope" beetwen adjacent
       cells.  The slope calculation accurately acounts for the variable scale
       in lat-lon projections.


       The  program  will  be run non-interactively, if the user specifies the
       names of raster map layers and any desired options on the command line,
       using  the  form rr..ddrraaiinn [--cc] [--aa] [--nn] iinnppuutt==_n_a_m_e oouuttppuutt==_n_a_m_e [ccoooorrddii--
       nnaattee==_x_,_y[,_x_,_y,...]]

       where the input _n_a_m_e is the name of a raster map layer to  be  used  in
       calculating  drainage,  the  output  _n_a_m_e is the name of the raster map
       layer to contain output, and each _x_,_y coordinate pair is the geographic
       location of a point from which drainage is to be calculated.


       Alternately,  the  user  can  simply  type rr..ddrraaiinn on the command line,
       without program arguments. In this case, the user will be prompted  for
       needed parameter values using the standard GRASS parser interface.

OOPPTTIIOONNSS
       Program parameters are as follows.

   FFllaaggss::
       --cc     Input  map cells values are copied verbatim along the least cost
              path.

       --aa     Accumulated input map cells values along the least cost path are
              written on output.

       --nn     Count cell numbers along the path


   PPaarraammeetteerrss::
       iinnppuutt==_n_a_m_e
              Name of raster map layer containing cell cost information.

       oouuttppuutt==_n_a_m_e
              Name of raster map layer to contain program output.

       ccoooorrddiinnaattee==_x_,_y[,_x_,_y,...]
              Each  x,y  pair  is the easting and northing (respectively) of a
              starting point from which a least-cost corridor will  be  devel-
              oped.   As  many points as desired can be input.  (But, see BUGS
              below.)


EEXXAAMMPPLLEESS
       Consider the following example:
       Input:                          Output:
         ELEVATION SURFACE               LEAST COST PATH



       The user-provided starting location in the above example is  the  boxed
       1199  in  the  left-hand map. The path in the output shows the least-cost
       corridor for moving from the starting box to the lowest (smallest) pos-
       sible  point. This is the path a raindrop would take in this landscape.


       With the --cc _(_c_o_p_y_) flag, you get the following result:
       Input:                          Output:
         ELEVATION SURFACE               LEAST COST PATH


       Note that the last _0 will not be put in the null values map.



       With the --aa _(_a_c_c_u_m_u_l_a_t_e_) flag, you get the following result:
       Input:                          Output:
         ELEVATION SURFACE               LEAST COST PATH



       With the --nn _(_n_u_m_b_e_r_) flag, you get the following result:
       Input:                          Output:
         ELEVATION SURFACE               LEAST COST PATH




BBUUGGSS
       _r_._d_r_a_i_n currently finds only the lowest  point  (the  cell  having  the
       smallest  category value) in the input file that can be reached through
       directly adjacent cells that are less than or equal  in  value  to  the
       cell  reached immediately prior to it; therefore, it will not necessar-
       ily reach the lowest point in the input file. It currently  finds  _p_i_t_s
       in the data, rather than the lowest point present.


       Sometimes,  when  using  an  integer cell map and the differences among
       cell category values in the _r_._c_o_s_t cumulative cost surface  output  are
       small,  this  cumulative cost output cannot accurately be used as input
       to _r_._d_r_a_i_n (_r_._d_r_a_i_n will output bad results).  This problem can be cir-
       cumvented by making the differences between cell category values in the
       cumulative cost output bigger.  It is recommended that, if  the  output
       from  _r_._c_o_s_t  is  to be used as input to _r_._d_r_a_i_n, the user multiply the
       input cost surface map to _r_._c_o_s_t by the value of  the  map  resolution,
       before  running _r_._c_o_s_t.  This can be done using _r_._m_a_p_c_a_l_c or other pro-
       grams.  The map resolution can be found using _g_._r_e_g_i_o_n.

SSEEEE AALLSSOO
       _g_._r_e_g_i_o_n

       _r_._c_o_s_t

       _r_._m_a_p_c_a_l_c

       _p_a_r_s_e_r

AAUUTTHHOORR
       Completely rewritten by Roger S. Miller

       _L_a_s_t _c_h_a_n_g_e_d_: _$_D_a_t_e_: _2_0_0_2_/_0_3_/_0_1 _0_0_:_0_8_:_3_1 _$



GRASS 5.0                                                           r.drain(1)
