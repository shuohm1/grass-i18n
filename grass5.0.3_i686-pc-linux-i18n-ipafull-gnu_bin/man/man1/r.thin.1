r.thin(1)                     Grass User's Manual                    r.thin(1)



NNAAMMEE
       rr..tthhiinn   - Thins non-zero cells that denote linear features in a raster
       map layer.
       _(_G_R_A_S_S _R_a_s_t_e_r _P_r_o_g_r_a_m_)

SSYYNNOOPPSSIISS
       rr..tthhiinn
       rr..tthhiinn hheellpp
       rr..tthhiinn iinnppuutt==_n_a_m_e oouuttppuutt==_n_a_m_e

DDEESSCCRRIIPPTTIIOONN
       _r_._t_h_i_n scans the named _i_n_p_u_t raster map layer and thins non-zero  cells
       that  denote  linear features into linear features having a single cell
       width.


       _r_._t_h_i_n will thin only the non-zero cells of the named _i_n_p_u_t raster  map
       layer within the current geographic region settings.  The cell width of
       the thinned _o_u_t_p_u_t raster map layer will be equal to the  cell  resolu-
       tion of the currently set geographic region.  All of the thinned linear
       features will have the width of a single cell.


       _r_._t_h_i_n will create a new _o_u_t_p_u_t raster data file containing the thinned
       linear  features.  _r_._t_h_i_n assumes that linear features are encoded with
       positive values on a background of 0's in the _i_n_p_u_t raster data file.

OOPPTTIIOONNSS
   PPaarraammeetteerrss::
       iinnppuutt==_n_a_m_e
              Name of a raster map layer containing data to be thinned.

       oouuttppuutt==_n_a_m_e
              Name of the new raster map layer to hold thinned program output.

       The  user  can  run  this  program either non-interactively or interac-
       tively.  The program will be run non-interactively if the  user  speci-
       fies  program  arguments  on  the  command line, using the form: rr..tthhiinn
       iinnppuutt==_n_a_m_e oouuttppuutt==_n_a_m_e

       Alternately, the user can simply type: rr..tthhiinn

       on the command line, without program arguments.  In this case, the user
       will  be  prompted for needed parameter values using the standard GRASS
       _p_a_r_s_e_r interface.

NNOOTTEE
       _r_._t_h_i_n only creates raster map layers.  You will need to run _r_._l_i_n_e  on
       the resultant raster file to create a vector (_v_._d_i_g_i_t) map layer.


       _r_._t_h_i_n  may  create small spurs or "dangling lines" during the thinning
       process.  These spurs may be  removed  (after  creating  a  vector  map
       layer) by _v_._t_r_i_m.


       _r_._t_h_i_n creates a 0/1 output map.

NNOOTTEE
       This  code  implements the thinning algorithm described in "Analysis of
       Thinning Algorithms Using Mathematical Morphology" by Ben-Kwei Jang and
       Ronlad  T.  Chin  in  _T_r_a_n_s_a_c_t_i_o_n_s  _o_n  _P_a_t_t_e_r_n  _A_n_a_l_y_s_i_s  _a_n_d  _M_a_c_h_i_n_e
       _I_n_t_e_l_l_i_g_e_n_c_e, vol. 12, No. 6, June 1990.  The definition Jang and  Chin
       give  of the thinning process is "successive removal of outer layers of
       pixels from an object while retaining any pixels  whose  removal  would
       alter the connectivity or shorten the legs of the sceleton."


       The  sceleton  is  finally thinned when the thinning process converges;
       i.e., "no further pixels can be removed without altering the connectiv-
       ity  or shortening the sceleton legs" (p. 541).  The authors prove that
       the thinning process described always converges and produces  one-pixel
       thick  sceletons.   The  number  of  iterations depends on the original
       thickness of the object.  Each iteration peels off the  outside  pixels
       from  the  object.   Therefore, if the object is <= n pixels thick, the
       algorithm should converge in <= iterations.

SSEEEE AALLSSOO
       _g_._r_e_g_i_o_n

       _r_._l_i_n_e

       _v_._d_i_g_i_t

       _v_._s_u_p_p_o_r_t

       _v_._t_r_i_m

       _p_a_r_s_e_r

AAUUTTHHOORR
       Olga Waupotitsch, U.S.Army Construction Engineering Research Laboratory


       The  code for finding the bounding box as well as input/output code was
       written by Mike Baba (DBA  Systems,  1990)  and  Jean  Ezell  (USACERL,
       1988).

       _L_a_s_t _c_h_a_n_g_e_d_: _$_D_a_t_e_: _2_0_0_2_/_0_1_/_2_5 _0_5_:_4_5_:_3_4 _$



GRASS 5.0                                                            r.thin(1)
