r.recode(1)                   Grass User's Manual                  r.recode(1)



NNAAMMEE
       _r_._r_e_c_o_d_e - recode raster maps

       _(_G_R_A_S_S _R_a_s_t_e_r _P_r_o_g_r_a_m_)

SSYYNNOOPPSSIISS
       rr..rreeccooddee [--aadd] iinnppuutt_=_n_a_m_e oouuttppuutt_=_n_a_m_e [ttiittllee_=_n_a_m_e]

DDEESSCCRRIIPPTTIIOONN
       _r_._r_e_c_o_d_e  creates  an  output  map  layer  based on an input raster map
       layer. The output map layer will be a recoding of the input  map  layer
       based  on  recode  rules  input to _r_._r_e_c_o_d_e. A _t_i_t_l_e for the output map
       layer may be (optionally) specified by the user.


       The recode  rules are read from standard input  (i.e.,  from  the  key-
       board, redirected from a file, or piped through another program).


       The  program  will  be  run non-interactively if the user specifies the
       name of the raster map layer to be recoded, the _n_a_m_e of an output layer
       to  hold recoded map, and (optionally) the name of a title for the out-
       put map.

   FFllaagg::
       --aa     Align the current region to the input map

       --dd     Force output to double map type (DCELL)


   PPaarraammeetteerrss::
       iinnppuutt  Raster map to be recoded

       oouuttppuutt Name for the resulting raster map

       ttiittllee  Title for the resulting raster map

       Enter a rule in one of these formats:
           old_low:old_high:new_low:new_high
           old_low:old_high:new_val  (i.e. new_high == new_low)
           *:old_val:new_val         (interval [inf, old_val])
           old_val:*:new_val         (interval [old_val, inf])

       _r_._r_e_c_o_d_e is loosely based on  r.reclass  and  uses  the  GRASS  reclass
       library to convert the rasters. It has routines for converting to every
       possible combination of raster (eg. int to  double,  double  to  float,
       etc).   Standard floating point raster precision is float, with _-_d dou-
       ble precision will be written.

       There are four basic routines that it accepts:

              old-low to old-high is reclassed to new-low to new high ,  where
              the  user  provides  all four values. The program figures on the
              fly what type of raster should be created.

              old-low to old-high is reclassed to a single new value. Anything
              outside the range is null.

               *  to  old-high will reclass everything less than old-high to a
              single new value.

               old-low to * will reclass everything greater than old-low to  a
              single new value.

       These four sets of arguments can be given on the command line, or piped
       via stdin or a file. More than one set of arguments is accepted.

EEXXAAMMPPLLEESS
       MMaapp ttyyppee ccoonnvveerrssiioonn

       To simply convert a raster between formats (eg. int to float) the  user
       would use the first argument. For example

       10:1500:0.1:15.0

       would  convert  an old raster with range between 10 and 1500 to a float
       raster with range bewteen 0.1 and 15.0.


       VVaalluuee rreeppllaacceemmeenntt

       r.recode can be used to replace existing cell  values  by  others.  The
       formatting  is as described above. In following example the values 1, 2
       and 3 are replaced by 1.1, 7.5 resp. 0.4:


           r.recode in=oldmap out=newmap << EOF
           1:1:1.1:1.1
           2:2:7.5:7.5
           3:3:0.4:0.4
           EOF


AAUUTTHHOORR
       CERL

       _L_a_s_t _c_h_a_n_g_e_d_: _$_D_a_t_e_: _2_0_0_2_/_0_3_/_0_1 _0_0_:_2_7_:_4_5 _$



GRASS 5.0                                                          r.recode(1)
