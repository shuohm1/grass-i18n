r.mapcalc(1)                  Grass User's Manual                 r.mapcalc(1)



NNAAMMEE
       rr..mmaappccaallcc  - Raster map layer data calculator.
       _(_G_R_A_S_S _R_a_s_t_e_r _P_r_o_g_r_a_m_)

SSYYNNOOPPSSIISS
       rr..mmaappccaallcc
       rr..mmaappccaallcc [rreessuulltt==_e_x_p_r_e_s_s_i_o_n]

DDEESSCCRRIIPPTTIIOONN
       _r_._m_a_p_c_a_l_c  performs  arithmetic  on  raster map layers.  New raster map
       layers can be created which are arithmetic expressions involving exist-
       ing  raster  map layers, integer or floating point constants, and func-
       tions.

PPRROOGGRRAAMM UUSSEE
       If used without command line arguments, _r_._m_a_p_c_a_l_c will read its  input,
       one  line at a time, from standard input (which is the keyboard, unless
       redirected from a file or across a pipe).  Otherwise, the expression on
       the command line is evaluated.  _r_._m_a_p_c_a_l_c expects its input to have the
       form:


       rreessuulltt==_e_x_p_r_e_s_s_i_o_n


       where _r_e_s_u_l_t is the name of a raster map layer to contain the result of
       the  calculation  and  _e_x_p_r_e_s_s_i_o_n  is  any  legal arithmetic expression
       involving existing raster map layers, integer or  floating  point  con-
       stants, and functions known to the calculator.  Parentheses are allowed
       in the expression and may be nested to any depth.  _r_e_s_u_l_t will be  cre-
       ated in the user's current mapset.


       The  formula  entered  to _r_._m_a_p_c_a_l_c by the user is recorded both in the
       _r_e_s_u_l_t map TITLE (which appears in the category file for _r_e_s_u_l_t) and in
       the history file for _r_e_s_u_l_t.


       Some characters have special meaning to the command shell.  If the user
       is entering input to _r_._m_a_p_c_a_l_c on the command line, expressions  should
       be enclosed within single quotes.  See NOTES, below.



OOPPEERRAATTOORRSS AANNDD OORRDDEERR OOFF PPRREECCEEDDEENNCCEE
       The following operators are supported:
            Operator   Meaning                    Type        Precedence
            --------------------------------------------------------------
            ^          exponentiation             Arithmetic  5
            %          modulus                    Arithmetic  4
            /          division                   Arithmetic  4
            *          multiplication             Arithmetic  4
            +          addition                   Arithmetic  3
            -          subtraction                Arithmetic  3
            ==         equal                      Logical     2
            !=         not equal                  Logical     2
            >          greater than               Logical     2
            >=         greater than or equal      Logical     2
            <          less than                  Logical     2
            <=         less than or equal         Logical     2
            &&         and                        Logical     1
            ||         or                         Logical     1
            #          color separator operator   Arithmetic

       (modulus is the remainder upon division)


       The  operators  are  applied  from  left to right, with those of higher
       precedence applied before those with lower precedence.  Division  by  0
       and modulus by 0 are acceptable and give a 0 result.  The logical oper-
       ators give a 1 result if the comparison is true, 0 otherwise.





RRAASSTTEERR MMAAPP LLAAYYEERR NNAAMMEESS
       Anything in the expression which is not a number, operator, or function
       name is taken to be a raster map layer name.  Examples:


       elevation x3 3d.his



       Most  GRASS raster map layers meet this naming convention.  However, if
       a raster map layer has a name which conflicts with the above  rule,  it
       should be quoted.  For example, the expression


       x = a-b



       would be interpreted as:  x equals a minus b, whereas


       x = "a-b"



       would be interpreted as:  x equals the raster map layer named _a_-_b


       Also


       x = 3107



       would create _x filled with the number 3107, while


       x = "3107"



       would copy the raster map layer _3_1_0_7 to the raster map layer _x.


       Quotes  are  not  required  unless the raster map layer names look like
       numbers or contain operators, OR unless the program is run non-interac-
       tively.   Examples  given here assume the program is run interactively.
       See NOTES, below.


       _r_._m_a_p_c_a_l_c will look for the raster map layers according to  the  user's
       current mapset search path.  It is possible to override the search path
       and specify the mapset from which to select the raster map layer.  This
       is done by specifying the raster map layer name in the form:


       name@mapset



       For example, the following is a legal expression:


       result = x@PERMANENT / y@SOILS



       The  mapset  specified  does  not have to be in the mapset search path.
       (This method of overriding the mapset search  path  is  common  to  all
       GRASS commands, not just _r_._m_a_p_c_a_l_c.)



TTHHEE NNEEIIGGHHBBOORRHHOOOODD MMOODDIIFFIIEERR
       Maps and images are data base files stored in raster format, i.e., two-
       dimensional matrices of integer values.  In _r_._m_a_p_c_a_l_c, maps may be fol-
       lowed  by a _n_e_i_g_h_b_o_r_h_o_o_d modifier that specifies a relative offset from
       the current cell being evaluated.  The format is _m_a_p_[_r_,_c_], where  _r  is
       the  row  offset  and  _c  is  the column offset.  For example, _m_a_p_[_1_,_2_]
       refers to the cell one row below and two columns to the  right  of  the
       current cell, _m_a_p_[_-_2_,_-_1_] refers to the cell two rows above and one col-
       umn to the left of the current cell, and _m_a_p_[_0_,_1_] refers  to  the  cell
       one  column  to the right of the current cell.  This syntax permits the
       development of neighborhood-type filters within a single map or  across
       multiple maps.



RRAASSTTEERR MMAAPP LLAAYYEERR VVAALLUUEESS FFRROOMM TTHHEE CCAATTEEGGOORRYY FFIILLEE
       Sometimes  it  is desirable to use a value associated with a category's
       _c_o_n_t_e_n_t_s instead of the category value itself.  If a raster  map  layer
       name  is  preceded  by  the @@ operator, then the labels in the category
       file for the raster map layer are used in the expression instead of the
       category value.


       For  example,  suppose  that the raster map layer _s_o_i_l_._p_h (representing
       soil pH values) has a category file with labels as follows:



       cat  label
       ------------------
       0    no data

       1    1.4
       2    2.4
       3    3.5
       4    5.8
       5    7.2
       6    8.8
       7    9.4





       Then the expression:


       result = @soils.ph * 10



       would produce a result with category values 0, 14, 24, 35, 58,  72,  88
       and 94.


       Note  that  this  operator may only be applied to raster map layers and
       produces a floating point value in the expression.  Also  the  category
       label  must  start with a valid number.  Missing labels, or labels that
       do not start with a number will (silently) produce a 0 value  for  that
       category.

GGRREEYY SSCCAALLEE EEQQUUIIVVAALLEENNTTSS AANNDD CCOOLLOORR SSEEPPAARRAATTEESS
       It  is  often  helpful  to  manipulate the colors assigned to map cate-
       gories.  This is particularly useful when the  spectral  properties  of
       cells  have  meaning  (as  with imagery data), or when the map category
       values represent real quantities (as when category values reflect  true
       elevation values).  Map color manipulation can also aid visual recogni-
       tion, and map printing.


       The # operator can be used to either convert  map  category  values  to
       their grey scale equivalents or to extract the red, green, or blue com-
       ponents of a raster map layer into separate raster map layers.


       result = #map



       converts each category value in _m_a_p to a value in the range 0-255 which
       represents  the grey scale level implied by the color for the category.
       If the map has a grey scale color table, then the grey  level  is  what
       #map evaluates to.  Otherwise, it is computed as:


       0.10 * red + 0.81 * green + 0.01 * blue



       Alternatively, you can use:


       result = y#map



       to use the NTSC weightings:


       0.30 * red + 0.59 * green + 0.11 * blue



       Or, you can use:


       result = i#map



       to use equal weightings:


       0.33 * red + 0.33 * green + 0.33 * blue



       The  #  operator  has  three  other forms:  r#map, g#map, b#map.  These
       extract the red, green, or blue components in  the  named  raster  map,
       respectively.   The  GRASS shell script _b_l_e_n_d_._s_h extracts each of these
       components from two raster map layers, and combines  them  by  a  user-
       specified  percentage.   These  forms allow color separates to be made.
       For example, to extract the red component from _m_a_p and store it in  the
       new 0-255 map layer _r_e_d, the user could type:


       red = r#map



       To assign this map grey colors type:


       r.colors map=red color=rules
       black
       white



       To assign this map red colors type:


       r.colors map=red color=rules
       black
       red






FFUUNNCCTTIIOONNSS
       The  functions  currently supported are listed in the table below.  The
       type of the result is indicated in the last column.  _F means  that  the
       functions  always  results  in a floating point value, _I means that the
       function gives an integer result, and _* indicates that  the  result  is
       float if any of the arguments to the function are floating point values
       and integer if all arguments are integer.



       function       description                        type
       ---------------------------------------------------------------------------
       abs(x)              return absolute value of x              *
       atan(x)             inverse tangent of x (result is in degrees)  F
       atan(x,y)      inverse tangent of y/x (result is in degrees)     F
       cos(x)              cosine of x (x is in degrees)           F
       double(x)      convert x to double-precision floating point F
       eval([x,y,...,]z)   evaluate values of listed expr, pass results to z
       exp(x)              exponential function of x               F
       exp(x,y)       x to the power y                   F
       float(x)       convert x to single-precision floating point F
       if             decision options:                  *
       if(x)               1 if x not zero, 0 otherwise
       if(x,a)             a if x not zero, 0 otherwise
       if(x,a,b)      a if x not zero, b otherwise
       if(x,a,b,c)         a if x > 0, b if x is zero, c if x < 0
       int(x)              convert x to integer [ truncates ]      I
       isnull(x)               check if x = NULL
       log(x)              natural log of x                   F
       log(x,b)       log of x base b                         F
       max(x,y[,z...])          largest value of those listed           *
       median(x,y[,z...])  median value of those listed            *
       min(x,y[,z...])          smallest value of those listed               *
       mode(x,y[,z...])            mode     value     of     those      listed
       *
       not(x)              1 if x is zero, 0 otherwise
       rand(a,b)      random value between a and b
       round(x)       round x to nearest integer              I
       sin(x)              sine of x (x is in degrees)             F
       sqrt(x)             square root of x                   F
       tan(x)              tangent of x (x is in degrees)               F



       Internal variables:

        row()                  current row of moving window
        col()                  current col of moving window
        x()                    current x-coordinate of moving window
        y()                    current y-coordinate of moving window
        ewres()                current east-west resolution
        nsres()                current north-south resolution
        null()                 NULL value

       Note, that the row() and col() indexing starts with 1.

FFLLOOAATTIINNGG PPOOIINNTT VVAALLUUEESS IINN TTHHEE EEXXPPRREESSSSIIOONN
       Floating  point numbers are allowed in the expression. A floating point
       number is a number which contains a decimal point:
       2.3   12.   .81

       Floating point values in the expression are handled in a  special  way.
       With  arithmetic and logical operators, if either operand is float, the
       other is converted to float and the result of the operation  is  float.
       This means, in particular that division of integers results in a (trun-
       cated) integer, while division of floats results in an accurate  float-
       ing  point  value.   With  functions  of  type * (see table above), the
       result is float if any argument is float, integer otherwise.


       Note: If you calculate with integer numbers, the resulting map will  be
       integer.  If  you  want to get a float result, add the decimal point to
       integer number(s).

NNUULLLL ssuuppppoorrtt
              Division by zero should result in NULL.

              Modulus by zero should result in NULL.

                   NULL-values in any arithmetic or logical  operation  should
              result in NULL.

                   NULL-values  in  function  arguments  should result in NULL
              (however, if(), eval() and isnull() are  treated  specially,  as
              described below).

                    The eval() function always returns its last argument

                    The situation for if() is:
                   if(x)
                       NULL if x is NULL; 0 if x is zero; 1 otherwise
                   if(x,a)
                       NULL if x is NULL; a if x is non-zero; 0 otherwise
                   if(x,a,b)
                       NULL if x is NULL; a if x is non-zero; b otherwise
                   if(x,n,z,p)
                       NULL if x is NULL; n if x is negative;
                    z if x is zero; p if x is positive


                   The  (new)  function  isnull(x)  returns: 1 if x is NULL; 0
              otherwise. The (new) function null() (which  has  no  arguments)
              returns an integer NULL.

              Non-NULL,  but  invalid, arguments to functions should result in
              NULL.
                   Examples:
                   log(-2)
                   sqrt(-2)
                   pow(a,b) where a is negative and b is not an integer



       NULL support: Please note that  any  math  performed  with  NULL  cells
       always  results in a NULL value for these cells. If you want to replace
       a NULL cell on-the-fly, use the isnull() test function in  a  if-state-
       ment.


       Example:  The  users  wants  the  NULL-valued  cells to be treated like
       zeros. To add maps A and B (where B contains NULLs) to get a map C  the
       user can use a construction like:


       C=A + if(isnull(B),0,B)

EEXXAAMMPPLLEESS
       To compute the average of two raster map layers _a and _b:
            ave = (a + b)/2

       To form a weighted average:
            ave = (5*a + 3*b)/8.0

       To  produce  a  binary representation of the raster map layer _a so that
       category 0 remains 0 and all other categories become 1:
            mask = a/a

       This could also be accomplished by:
            mask = if(a)

       To mask raster map layer _b by raster map layer _a:
            result = if(a,b)

       To change all map values below 5 to NULL:
               newmap = if(map<5, null(), 5)


RREEGGIIOONN//MMAASSKK
       The user must be aware of the current  geographic  region  and  current
       mask  settings  when  using  _r_._m_a_p_c_a_l_c.  All raster map layers are read
       into the current geographic region masked by the current mask.   If  it
       is  desired  to  modify  an existing raster map layer without involving
       other raster map layers, the geographic region should be set  to  agree
       with the cell header for the raster map layer.  For example, suppose it
       is determined that the _e_l_e_v_a_t_i_o_n raster map layer must have each  cate-
       gory  value  increased by 10 meters.  The following expression is legal
       and will do the job:
            new_elevation = elevation + 10

       Since a category value of 0 is used in GRASS for locations which do not
       exist  in  the  raster map layer, the new raster map layer will contain
       the category value 10 in the locations that did not exist in the origi-
       nal  elevation.   Therefore,  in this example, it is essential that the
       boundaries of the geographic region be  set  to  agree  with  the  cell
       header.


       However,  if  there  is  a  current mask, then the resultant raster map
       layer is masked when it is written; i.e., 0 category values in the mask
       force zero values in the output.

NNOOTTEESS
       Extra  care  must  be  taken  if the expression is given on the command
       line.  Some characters have special meaning to the UNIX  shell.   These
       include, among others:


       * ( ) > & |


       It is advisable to put single quotes around the expression;  e.g.:
            result = 'elevation * 2'

       Without the quotes, the *, which has special meaning to the UNIX shell,
       would be altered and _r_._m_a_p_c_a_l_c would see something other than the *.


       If the input comes directly from the keyboard and the _r_e_s_u_l_t raster map
       layer  exists, the user will be asked if it can be overwritten.  Other-
       wise, the _r_e_s_u_l_t raster map layer will automatically be overwritten  if
       it exists.


       Quoting _r_e_s_u_l_t is not allowed.  However, it is never necessary to quote
       _r_e_s_u_l_t since it is always taken to be a raster map layer name.


       For formulas that the user enters from standard input (rather than from
       the command line), a line continuation feature now exists.  If the user
       adds \ to the end of an input line, _r_._m_a_p_c_a_l_c assumes that the  formula
       being  entered  by the user continues on to the next input line.  There
       is no limit to the possible number of input lines or to the length of a
       formula.


       If  the  _r_._m_a_p_c_a_l_c  formula  entered  by the user is very long, the map
       TITLE will contain only some of it, but most (if not all) of  the  for-
       mula will be placed into the history file for the _r_e_s_u_l_t map.


       When  the  user enters input to _r_._m_a_p_c_a_l_c non-interactively on the com-
       mand line, the program will not warn the user not to overwrite existing
       map layers.  Users should therefore take care to assign program outputs
       raster file names that do not yet exist in their current mapsets.

BBUUGGSS
       Continuation lines must end with a  and have NO  trailing  white  space
       (blanks  or  tabs).   If  the user does leave white space at the end of
       continuation lines, the error messages produced by  _r_._m_a_p_c_a_l_c  will  be
       meaningless  and the equation will not work as the user intended.  This
       is important for the eval() function.


       Error messages produced by _r_._m_a_p_c_a_l_c are almost  useless.   In  future,
       _r_._m_a_p_c_a_l_c  should  make some attempt to point the user to the offending
       section of the equation, e.g.:
            x = a * b ++ c

            ERROR: somewhere in line 1: ...  b ++ c ...



       Currently, there is no comment mechanism in _r_._m_a_p_c_a_l_c.  Perhaps  adding
       a  capability  that  would cause the entire line to be ignored when the
       user inserted a # at the start of a line as if  it  were  not  present,
       would do the trick.


       The function should require the user to type "end" or "exit" instead of
       simply a blank line.  This would make separation  of  multiple  scripts
       separable by white space.


       r.mapcalc does not print a warning in case of operations on NULL cells.
       It is left to the user to utilize the isnull() function.

SSEEEE AALLSSOO
       rr..mmaappccaallcc:: AAnn AAllggeebbrraa ffoorr GGIISS aanndd IImmaaggee PPrroocceessssiinngg, by Michael  Shapiro
       and Jim Westervelt, U.S. Army Construction Engineering Research Labora-
       tory (March/1991).


       PPeerrffoorrmmiinngg MMaapp CCaallccuullaattiioonnss oonn GGRRAASSSS DDaattaa:: rr..mmaappccaallcc PPrrooggrraamm  TTuuttoorriiaall,
       by  Marji  Larson,  Michael  Shapiro and Scott Tweddale, U.S. Army Con-
       struction Engineering Research Laboratory (December 1991)


       Grey scale conversion is based on the C.I.E. x,y,z system where y  rep-
       resents  luminance.  See "Fundamentals of Digital Image Processing," by
       Anil K. Jain (Prentice Hall, NJ, 1989; p 67).


       _b_l_e_n_d_._s_h_, _g_._r_e_g_i_o_n_, _r_._c_o_l_o_r_s_, _r_._c_o_m_b_i_n_e_, _r_._f_i_l_l_n_u_l_l_s_, _r_._i_n_f_e_r_,  _r_._m_a_s_k_,
       _r_._w_e_i_g_h_t

AAUUTTHHOORR
       Michael Shapiro, U.S.Army Construction Engineering Research Laboratory

       _L_a_s_t _c_h_a_n_g_e_d_: _$_D_a_t_e_: _2_0_0_3_/_0_2_/_0_9 _1_2_:_0_7_:_2_3 _$



GRASS 5.0                                                         r.mapcalc(1)
