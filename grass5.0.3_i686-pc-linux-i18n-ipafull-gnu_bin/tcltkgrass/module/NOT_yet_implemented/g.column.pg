proc DB_listtables {} {
	global file_name
	toplevel .files2
	wm geometry .files2 +100+100
	wm title .files2 "Tables"

	frame .files2.frame0 \
	    -borderwidth {2} \
	    -relief {flat}
	frame .files2.frame1

	listbox .files2.frame0.listbox \
	    -relief {sunken} \
	    -geometry 20x10 \
	    -yscrollcommand {.files2.frame0.vscrollbar set}

	  scrollbar .files2.frame0.vscrollbar \
	    -command {.files2.frame0.listbox yview}
	 button .files2.frame1.close -text "Close" -command {
		destroy .files2
                set file_name ""
	 }
	 button .files2.frame1.ok -text " Ok " -command {
                set file_name [selection get]
		destroy .files2
	 }

	  pack append .files2.frame0 \
	    .files2.frame0.listbox { left expand fill } \
	    .files2.frame0.vscrollbar { right fill }

#	  set db [exec g.gisenv PG_DBASE]
	  catch {exec g.gisenv PG_DBASE} db

	  label .files2.label -text "Database: $db"
	  set first 1
	  if { $db != ""} {
	     foreach i [ PQquery $db {retrieve ( pg.relname ) from pg in pg_class where pg.relkind != "i" and pg.relname !~ "pg_" sort by relname } ] {
     	        if { $first == 1 } {
			set first 0
		} else {
	           .files2.frame0.listbox insert end $i
	  	}
	     }
	  } else {
		.files2.frame0.listbox insert {Please,}
		.files2.frame0.listbox insert {select the database}
		.files2.frame0.listbox insert {first !}
	  }
	  pack append .files2.frame1 \
		.files2.frame1.close {left fill} \
		.files2.frame1.ok {right fill}
	  pack .files2.label
	  pack .files2.frame0 
	  pack .files2.frame1
        bind .files2.frame0.listbox <Double-ButtonPress-1> {
                set file_name [selection get]
                destroy .files2
        }
        tkwait window .files2
        return $file_name

}

proc DB_listcolumns {table} {
	global file_name
	toplevel .files
	wm geometry .files +100+100
	wm title .files files
	
	frame .files.frame0 \
	    -borderwidth {2} \
	    -relief {flat}

	listbox .files.frame0.listbox \
	    -relief {sunken} \
	    -geometry 20x10 \
	    -yscrollcommand {.files.frame0.vscrollbar set}

	  scrollbar .files.frame0.vscrollbar \
	    -command {.files.frame0.listbox yview}
	 button .files.close -text "Close" -command {
		destroy .files
                set file_name ""
	 }

	  pack append .files.frame0 \
	    .files.frame0.listbox { left expand fill } \
	    .files.frame0.vscrollbar { right fill }
	  pack .files.close
	  pack .files.frame0

          catch {exec g.gisenv PG_DBASE} db
 
          label .files.label -text "Database: $db  Table: $table"
      
	  set query "retrieve (pg_attribute.attname,pg_type.typname) \
		where  pg_class.relname = \"$table\" \
		and    pg_attribute.atttypid = pg_type.oid \
		and pg_attribute.attrelid=pg_class.oid \
		and   pg_attribute.attnum   > 0 \
		sort   by attname "
#	  puts $query
	  set first 1
 	  foreach i [ PQquery $db $query ] {
	     if {$first == 1 } {
		set first 0
	     } else {
	        .files.frame0.listbox insert end $i
	     }
	  }	

	pack .files.label
	pack .files.frame0
	pack .files.close
	pack .files.frame0
	pack .files.label

#	tkwait window .files
#	return $file_name
}


proc put_command { } {



  global name1
  global name2


  set cmd ""

  if { $name1 != "" } {
         set cmd "$cmd table=$name1"
  }

  if { $cmd != "" } {
     set cmd "g.column.pg -v $cmd"
  }
}

proc set_command_entry {} {

   .cmd.frame.frame4.entry configure -state normal
   .cmd.frame.frame4.entry delete 0 end
   .cmd.frame.frame4.entry insert 0 [put_command]
   .cmd.frame.frame4.entry configure -state disabled

}

# procedure to show window .
proc proc_g.select.pg { } {# xf ignore me 7

  # Window manager configurations


  global name1
  global name2

  toplevel .cmd

  wm geometry .cmd +100+20

  wm title .cmd "g.column.pg  j.soimasuo"


  # build widget .cmd.frame
  frame .cmd.frame \
    -borderwidth {2} \
    -height {220} \
    -width {350}

  # build widget .cmd.frame.label
  label .cmd.frame.label \
    -text {Description:}
  label .cmd.frame.label2 \
	-text {Lists the columns of a Postgres table}


  # build widget .cmd.frame.frame2
  frame .cmd.frame.frame2 \
    -borderwidth {2} \
    -geometry {30x30} \
    -relief {raised}

  # build widget .cmd.frame.frame2.label
  label .cmd.frame.frame2.label \
    -text {Table name:}

  # build widget .cmd.frame.frame2.entry
  entry .cmd.frame.frame2.entry \
    -borderwidth {3} \
    -relief {sunken}

  button .cmd.frame.frame2.button \
    -text {table} \
    -command { set file [DB_listtables ]
                if { $file != "" } {
                   set name1 $file
                   .cmd.frame.frame2.entry delete 0 end
                   .cmd.frame.frame2.entry insert 0 $file
                   set_command_entry
                }
             }


  bind .cmd.frame.frame2.entry <Return> {
       set name1 [%W get]
       set_command_entry  }

  # place
  place .cmd.frame.frame2.button -x 300 -y 30 -anchor nw

  # place
  place .cmd.frame.frame2.label -x 0 -y 0 -anchor nw

  # place
  place .cmd.frame.frame2.entry -x 0 -y 30 -width 300 -anchor nw



  # build widget .cmd.frame.frame4
  frame .cmd.frame.frame4 \
    -borderwidth {2} \
    -geometry {30x30} \
    -relief {raised}

  # build widget .cmd.frame.frame4.label
  label .cmd.frame.frame4.label \
    -text {Command:}

  # build widget .cmd.frame.frame4.entry
  entry .cmd.frame.frame4.entry \
    -borderwidth {3} \
    -relief {sunken}

  .cmd.frame.frame4.entry delete 0 end
  .cmd.frame.frame4.entry insert 0 {g.column.pg -v}

  .cmd.frame.frame4.entry configure -state disabled

  # place
  place .cmd.frame.frame4.label -x 0 -y 0 -anchor nw

  # place
  place .cmd.frame.frame4.entry -x 0 -y 30 -width 300 -anchor nw


  # build widget .cmd.frame.button1
  button .cmd.frame.button1 \
    -text {List} \
    -width {8} \
     -command { set name1 [.cmd.frame.frame2.entry get]
#  		set cmd [put_command]
 		if { $name1 != "" } {
# 		   catch { eval " exec $cmd " } 
			DB_listcolumns	$name1
			tkwait window .files	
 		   destroy .cmd
 		}
 	}

  # build widget .cmd.frame.button2
  button .cmd.frame.button2 \
    -text {Cancel} \
    -command { destroy .cmd } \
    -width {8}



  # place
  place .cmd.frame.frame4 -x 0 -y 115 -width 347 -height 65 -anchor nw

  # place
  place .cmd.frame.button1 -x 56 -y 185 -anchor nw

  # place
  place .cmd.frame.button2 -x 220 -y 185 -anchor nw

  # place
  place .cmd.frame.frame2 -x 0 -y 50 -width 347 -height 65 -anchor nw

 

  # place
  place .cmd.frame.label -x 0 -y 0 -anchor nw
  place .cmd.frame.label2 -x 0 -y 20 -anchor nw
 

  # pack widget .
  pack append .cmd \
    .cmd.frame {top frame center}


  if {"[info procs XFEdit]" != ""} {
    catch "XFMiscBindWidgetTree ."
    after 2 "catch {XFEditSetShowWindows}"
  }
}


global name1
set name1 ""
global name2
set name2 ""

global tcltkgrassbase
global database
global location
global mapset
global feature
set auto_path "$tcltkgrassbase/module  $auto_path"
if { [info exists env(GISDBASE)] == 0 ||
     [info exists env(LOCATION_NAME)] == 0 ||
     [info exists env(MAPSET)] == 0 } {
   puts stdout "GISDBASE, LOCATION_NAME and MAPSET must be set !!!"
   return
}
set database $env(GISDBASE)
set location $env(LOCATION_NAME)
set mapset $env(MAPSET)
set feature ""

proc_g.select.pg
