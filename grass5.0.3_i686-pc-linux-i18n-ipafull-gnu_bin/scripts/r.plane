#!/bin/sh
# Scripts creates a (inclined) plane.
# User specifies - inclination
#                - azimuth
#                - one definition point within plane with elevation
# 
# set nsres and ewres, north, south etc

if test "$GISBASE" = ""; then
 echo "You must be in GRASS GIS to run this program." >&2
 exit 1
fi   
     
eval `g.gisenv`
: ${GISBASE?} ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}
LOCATION=$GISDBASE/$LOCATION_NAME/$MAPSET

if [ "$1" = "-help" -o "$1" = "help" ]
then
 echo "r.plane:"
 echo "Please give the value for the dip (inclination) in degrees."
 echo "The value must be between -90 and 90 from horizontal,"
 echo "with positive values pointing down. Real numbers are valid."
 echo "No value results in dip=0 and  horizontal surface."
 echo ""
 exit
fi

eval `g.region -g`

echo ""
echo "Please give the value for the dip (inclination) in degrees."
echo "The value must be between -90 and 90 from horizontal,"
echo "with positive values pointing down. Real numbers are valid."
echo "No value results in dip=0 and  horizontal surface."
echo ""

# get directory for r.in.ascii
CELLDIR=$LOCATION/cell


gotit=0
while test $gotit -eq 0 
do
	echo -n "dip: "
	read dip
	# check the integer value of dip
	echo $dip > /tmp/$$
	awk '{ printf"dipint=%d",$1 }' /tmp/$$ > /tmp/$$dip
        eval `cat /tmp/$$dip`
	rm /tmp/$$*
	if test $dipint -gt -90 -a $dipint -lt 90 
	then
		gotit=1
	        echo $dip
	else
		echo Sorry, dip must be greater than -90 and less than 90.
		echo Please enter a valid value.
	fi
done
echo ""
echo "Please give the value for the azimut in degrees ccw from north."
echo "The value must be between 0 and 360. Real numbers are valid."
echo ""

gotit=0
while [ $gotit -eq 0 ]
do
	echo -n "azimuth: "
	read az
	if test $az -ge 0 -a $az -le 360
	then
		gotit=1
	        echo $az
	else
		echo Sorry, azimuth must be greater than -1  and less than 360
	fi
done

echo  "Please enter easting, northing for one point on the plane."
echo  "Real numbers are valid."

gotit=0
while [ $gotit -eq 0 ]
do
	echo -n "easting: "
	read ea
	echo $ea > /tmp/$$
	awk '{ printf"eaint=%d",$1 }' /tmp/$$ > /tmp/$$ea
        eval `cat /tmp/$$ea`
	rm /tmp/$$*
	if test $eaint -le $e -a $eaint -ge $w
	then
		gotit=1
	        echo $ea
	else
		echo "Sorry, point must be within current region"
                echo "Current region:"
                echo "west: "$w   "east: "$e
  	fi
done
gotit=0
while [ $gotit -eq 0 ]
do
	echo -n "northing: "
	read no
	echo $no > /tmp/$$
	awk '{ printf"noint=%d",$1 }' /tmp/$$ > /tmp/$$no
        eval `cat /tmp/$$no`
	rm /tmp/$$*
	if test $noint -gt $s -a $noint -lt $n
	then
		gotit=1
		echo $no
	else
		echo "Sorry, point must be within current region"
                echo "Current region:"
                echo "south: "$s   "north: "$n
  	fi
done

gotit=0
while [  $gotit -eq 0 ]
do
	echo -n "elevation: "
	read el
	if test $el
	then
		gotit=1
	       	echo $el
	else
                echo ""
	fi
done


g.ask type=new element=cell desc=raster prompt="Enter name for resulting file:" unixfile=/tmp/$$ 

eval `cat /tmp/$$`
rm -f /tmp/$$

echo "Resulting map will be named" $name

# now the actual algorithm in awk (stored in a temporary file)
cat > /tmp/$$ << EOF

{
if (NR==1) {
# print file header
  rows = (north-south) / nsres
  cols = (east-west) / ewres
    printf("east:     %d\n",east)
    printf("west:     %d\n",west)
    printf("south:    %d\n",south)
    printf("north:    %d\n",north)
    printf("cols:     %d\n",cols)
    printf("rows:     %d\n",rows)
    cells=rows*cols
    z=1
    }

if (NR==2) {
    pi=3.14159265359
    a2=(az*pi)/180
    dip2=(dip*pi)/180 
    tandip=(sin(dip2)/cos(dip2))
    northc=north-(0.5*nsres)
    southc=south+(0.5*nsres)
    eastc=east-(0.5*ewres)
    westc=west+(0.5*ewres)
   
    for (y=northc; y >= southc; y=y-nsres) {
       for (x=westc; x <= eastc; x=x+ewres) {
	 dx=(ea-x)
	 dy=(y-no)
 	 dist = sqrt((dx*dx) + (dy*dy))
	 if (dist==0) {
	   new_elev[z]=el
	   }
	 else {
	   gamma = atan2((dx/dist),(dy/dist))
	   epsilon=a2-gamma
	   d=dist*cos(epsilon)
	   h=(d*sin(dip2)/cos(dip2))	
	   new_elev[z]=el-h
	   z++
	   }
         }
     }
}
if (NR>=2) {
}
}
END {  
      for (z=1; z <= cells; z++) {
 	printf" %d",new_elev[z]
 	}
  
}

EOF

#execute awk and remove temporary file

awk  -f /tmp/$$ -v east=$e west=$w north=$n south=$s ea=$ea no=$no \
  nsres=$nsres ewres=$ewres  dip=$dip az=$az el=$el /tmp/$$ > $name

rm /tmp/$$

echo "Running r.in.ascii, please stand by"
r.in.ascii i=$name o=$name
rm $name

dat=`date +'%a %b %e %T %Y'`
user=`logname`
cat > $LOCATION/hist/$name << EOF2
$dat
$MAPSET
$name
$user
cell


Generated by plane.sh 
At point $ea, $no, elevation $el
dip: $dip degress azimuth: $az degrees ccw from north
EOF2

