#!/bin/sh

#
#                   ********ps.map.barscale********
#
# Written by Malcolm D. Williamson
# Center for Advanced Spatial Technologies
# University of Arkansas, Fayetteville AR
#
# revision: 5/3/95
#-----------------
# small corrections May 1998 Markus Neteler

# @(#) Creates vector barscale & script file for use with ps.map

if test "$GISBASE" = ""; then
 echo "You must be in GRASS GIS to run this program." >&2
 exit 1
fi   
     
eval `g.gisenv`
: ${GISBASE?} ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}
LOCATION=$GISDBASE/$LOCATION_NAME/$MAPSET

if [ "$1" = "help" ] || [ "$1" = "-help" ] ; then
  echo ""
  echo "Creates vector barscale & script file for use with ps.map"
  echo "     barscale.sh: Use interactively."
  sleep 1
  exit 0
fi

while true ; do
 echo ""
 echo "Creates vector barscale & script file for use with ps.map"
 g.ask type=new prompt="Enter name for this barscale vector layer." \
  element=dig desc=vector unixfile=/tmp/$$
 . /tmp/$$
 rm -f /tmp/$$
 if [ ! -d $LOCATION/dig_ascii ] ; then
   mkdir $LOCATION/dig_ascii
 fi
 if [ -f $LOCATION/dig_ascii/$name ] ; then
   # clear
   echo ""
   echo "The file $LOCATION/dig_ascii/$name"
   echo "already exists; you must remove it or choose another vector layer name."
   sleep 3
   continue
  else
   break
 fi
done

if [ -z "$name" ] ; then
  exit 0
fi

WORKDIR=`pwd`
BARNAME=$name
SCRIPTFILE=$name.psmap
while true ; do
 if [ -f $WORKDIR/$SCRIPTFILE ] ; then
   echo ""
   echo "An output script file for ps.map called $SCRIPTFILE already exists."
   echo -n "Do you wish to overwrite it? (y/n) [n] "
   read ANS
   if [ "$ANS" = "y" ] || [ "$ANS" = "Y" ] ; then
     rm $WORKDIR/$SCRIPTFILE
     break
    else
     echo -n "Please enter a new name: "
     read SCRIPTFILE
     while true ; do
      if [ "$SCRIPTFILE" = "" ] ; then
        echo -n "Please enter a new name: "
        read SCRIPTFILE
        continue
       else
        break
      fi
     done
   fi
   continue
  else
   break
 fi
done

# Finding current region
 
CNORTH=`cat $LOCATION/WIND | awk '/north:/ {printf "%0f\n",$2}'`
CSOUTH=`cat $LOCATION/WIND | awk '/south:/ {printf "%0f\n",$2}'`
CEAST=`cat $LOCATION/WIND | awk '/east:/ {printf "%0f\n",$2}'`
CWEST=`cat $LOCATION/WIND | awk '/west:/ {printf "%0f\n",$2}'`

BARHEIGHT=`echo $CNORTH $CSOUTH | awk '{ barheight = ( $1 - $2 ) * .0031 
      printf "%0g", barheight }'`
 
# clear
echo -n "How tall, in MAP UNITS, should the barscale be? [$BARHEIGHT] "
read BARHIN
if [ -z "$BARHIN" ] ; then
  BARHEIGHT=$BARHEIGHT
 else
  BARHEIGHT=$BARHIN
fi
 
echo ""
echo -n "What line width do you wish to use? [0] "
read LINEWIDTH
if [ -z "$LINEWIDTH" ] ; then
  LINEWIDTH=0
fi
 
# clear
echo -n "What font do you wish to use for the text? [Helvetica-Bold] "
read FONT
if [ -z "$FONT" ] ; then
  FONT=Helvetica-Bold
fi
echo ""
echo -n "What font size, in MAP UNITS, do you want? [$BARHEIGHT] "
read FONTSIZE
if [ -z "$FONTSIZE" ] ; then
  FONTSIZE=$BARHEIGHT
fi

# Finding projection

PROJ=`cat $LOCATION/WIND | awk '/proj:/ {printf "%0f\n",$2}'`
if [ $PROJ -eq 1 ] ; then
  DIVISOR=1.0
 elif [ $PROJ -eq 2 ] ; then
   DIVISOR=0.3048006
  elif [ $PROJ -eq 0 ] || [ $PROJ -eq 3 ] ; then
    echo "Illegal projection; cannot be lat/long or x,y."
    sleep 1
    echo ""
    exit 1
   elif [ ! -d $LOCATION/../PERMANENT ] ; then
     echo "$GISDBASE/$LOCATION_NAME/PERMANENT/PROJ_UNITS not found;"
     echo "can't continue."
     sleep 1
     echo ""
     exit 1
    elif [ ! -f $GISDBASE/$LOCATION_NAME/PERMANENT/PROJ_UNITS ] ; then
      echo "Projection definition file not found."
      echo "Please run g.setproj and then try this program again."
      sleep 1
      echo ""
      exit 1
     else
      DIVISOR=`sed -n '3p' $GISDBASE/$LOCATION_NAME/PERMANENT/PROJ_UNITS \
       | cut -d' ' -f2`
fi    

ZONE=`cat $LOCATION/WIND | awk '/zone:/ {printf "%d\n",$2}'`

while true ; do
 # clear
 echo "Enter the corresponding number for the units that you wish to use:"
 echo "        1) miles"
 echo "        2) kilometers"
 echo "        3) feet"
 echo "        4) meters"
 echo ""
 echo -n "> "
 read units
 case "$units"
 in
	1) UNITS=`echo 1609.3 $DIVISOR | awk '{ units = $1 / $2 
		printf "%0f", units }'`
           UNITNAME=MILES
           break;;
	2) UNITS=`echo 1000 $DIVISOR | awk '{ units = $1 / $2
                printf "%0f", units }'`
           UNITNAME=KILOMETERS
           break;;
	3) UNITS=`echo 0.3048 $DIVISOR | awk '{ units = $1 / $2
                printf "%0f", units }'`
	   UNITNAME=FEET
	   break;;
	4) UNITS=`echo 1.0 $DIVISOR | awk '{ units = $1 / $2
                printf "%0f", units }'`
	   UNITNAME=METERS
	   break;;
	*) echo ""
           echo "Choice must be 1, 2, 3, or 4"
           sleep 2
           continue;;
 esac
done

# Request width of barscale.

# clear
while true ; do
 echo "How many $UNITNAME do you want your barscale to extend to the RIGHT of zero?"
 echo -n "> "
 read UNITNUM
 if [ "$UNITNUM" = "" ] ; then
   # clear
   echo "INPUT REQUIRED!"
   echo ""
   continue
  else
   break
 fi
done

# Request number of segments in barscale.

# clear
echo "How many divisions do you wish in your barscale?"
echo -n "> [5] "
read SEGMENTS
if [ "$SEGMENTS" = "" ] ; then
  SEGMENTS=5
 elif [ $SEGMENTS = 0 ] ; then
   SEGMENTS=1
fi

# Choose extra subdivided unit(s) to left of zero.

# clear
echo "If you wish, you may add extra subdivided units to the LEFT of zero."
echo -n "How many $UNITNAME do you want to the LEFT of zero? [0] "
read LEFTUNITS
if [ "$LEFTUNITS" = "" ] ; then
  LEFTUNITS=0
 elif [ "$LEFTUNITS" != "0" ] ; then
   echo ""
   echo -n "How many divisions do you want to the left of zero? [2] "
   read LEFTSEGS
   if [ "$LEFTSEGS" = "" ] ; then
     LEFTSEGS=2
    elif [ $LEFTSEGS = 0 ] ; then
      LEFTSEGS=1
   fi
fi

# Calculate total height and width of barscale.

TOTALH=`echo $BARHEIGHT $FONTSIZE | awk '{ totalh = ( 1.5 * $1 ) + $2
   printf "%0f", totalh }'`
TOTALW=`echo $UNITNUM $LEFTUNITS $UNITS \
   | awk '{ totalw = ( $1 * $3 ) + ( $2 * $3 ) ; printf "%0f", totalw }'`

# Input coordinates for positioning barscale.

# clear
echo "You may enter the position for the barscale with either the mouse"
echo "or by percentage of current region."
echo ""
while true ; do
 sleep 1
 echo "Will your coordinate be for the left side, center, or right side"
 echo -n "of the barscale? (l, c, or r) [c] "
 read ans
 if [ "$ans" = "" ] ; then
   ans=c
 fi
 case "$ans"
  in
	l) HORALIGN=l
	   SIDE="left side"
	   break;;
	c) HORALIGN=c
	   SIDE="center"
	   break;;
	r) HORALIGN=r
	   SIDE="right side"
	   break;;
	*) echo ""
	   echo "Illegal response; must be l, c, or r!!"
	   echo "";;
 esac
done

# clear
while true ; do
 echo "Will your coordinate be for the top, center or bottom"
 echo -n "of the barscale? (t, c, b) [b] "
 read ans
 if [ "$ans" = "" ] ; then
   ans=b 
 fi
 case "$ans"
  in
	t) VERTALIGN=t
	   TOP="top"
           break;;
	c) VERTALIGN=c
           TOP="center"
           break;;
	b) VERTALIGN=b
           TOP="bottom"
           break;;
	*) echo ""
	   echo "Illegal response; must be t, c, or b!!"
	   echo ""
	   sleep 1;;
 esac
done

echo -n "Would you like to position it with the mouse? (y/n) [y] "
read ans
if [ "$ans" = "y" ] || [ "$ans" = "Y" ] || [ "$ans" = "" ] ; then
  while true ; do
   # clear
   MOUSECOORD=`d.where -1 | tr -s ' ' ':' | cut -d: -f2-3`
   echo ""
   MOUSEX=`echo $MOUSECOORD | cut -d: -f1`
   MOUSEY=`echo $MOUSECOORD | cut -d: -f2`
   echo -n "Is this position ok? (y/n) [y] "
   read ans
   if [ "$ans" = "y" ] || [ "$ans" = "Y" ] || [ "$ans" = "" ] ; then
     case "$HORALIGN"
      in
	l) BARLEFT=$MOUSEX
	   BARRIGHT=`echo $MOUSEX $TOTALW | awk '{ barright = $1 + $2
		printf "%0f", barright }'`;;
	c) BARLEFT=`echo $MOUSEX $TOTALW | awk '{ barleft = $1 - ( .5 * $2 )
		printf "%0f", barleft }'`
	   BARRIGHT=`echo $MOUSEX $TOTALW | awk '{ barright = $1 + ( .5 * $2 )
		printf "%0f", barright }'`;;
	r) BARLEFT=`echo $MOUSEX $TOTALW | awk '{ barleft = $1 - $2
		printf "%0f", barleft }'`
	   BARRIGHT=$MOUSEX;;
	*) echo "case statement error."
	   exit 1;;
     esac
     case "$VERTALIGN"
      in
	t) BARBOT=`echo $MOUSEY $TOTALH | awk '{ barbot = $1 - $2 
		printf "%0f", barbot }'`
	   TEXTTOP=$MOUSEY;;
	c) BARBOT=`echo $MOUSEY $TOTALH | awk '{ barbot = $1 - ( .5 * $2 )
		printf "%0f", barbot }'`
           TEXTTOP=`echo $MOUSEY $TOTALH | awk '{ texttop = $1 + ( .5 * $2 )
		printf "%0f", texttop }'`;;
	b) BARBOT=$MOUSEY
	   TEXTTOP=`echo $MOUSEY $TOTALH | awk '{ texttop = $1 + $2
		printf "%0f", texttop }'`;;
        *) echo "case statement error."
           exit 1;;
     esac

     if [ $BARRIGHT -gt $CEAST ] || [ $BARLEFT -lt $CWEST ] \
	|| [ $BARBOT -lt $CSOUTH ] || [ $TEXTTOP -gt $CNORTH ] ; then
       echo ""
       echo "Barscale position is at least partially outside of the"
       echo "current region. Please pick new coordinates."
       continue
      else
       break
     fi
    else
     continue
   fi
  done
 else
  # clear
  while true ; do
   echo "Enter a value for the percent distance from the west edge of the "
   echo -n "region to the $SIDE of your barscale: "
   read WPERCENT
   if [ -z "$WPERCENT" ] ; then
     # clear
     continue
    else
     PERCENTX=`echo $CEAST $CWEST $WPERCENT \
      | awk '{ wpos = (( $3 / 100 ) * ( $1 - $2 )) + $2 ; printf "%0f", wpos }'`

     case "$HORALIGN"
      in
        l) BARLEFT=$PERCENTX
           BARRIGHT=`echo $PERCENTX $TOTALW | awk '{ barright = $1 + $2
                printf "%0f", barright }'`;;
        c) BARLEFT=`echo $PERCENTX $TOTALW | awk '{ barleft = $1 - ( .5 * $2 )
                printf "%0f", barleft }'`
           BARRIGHT=`echo $PERCENTX $TOTALW | awk '{ barright = $1 + ( .5 * $2 )
                printf "%0f", barright }'`;;
        r) BARLEFT=`echo $PERCENTX $TOTALW | awk '{ barleft = $1 - $2
                printf "%0f", barleft }'`
           BARRIGHT=$PERCENTX;;
        *) echo "case statement error."
           exit 1;;
     esac
     if [ $BARRIGHT -gt $CEAST ] || [ $BARLEFT -lt $CWEST ] ; then
       echo ""
       echo "Barscale position is at least partially outside of the"
       echo "current region. Please pick new coordinates."
       continue
      else
       break
     fi
   fi
  done
  while true ; do
   echo "Enter a value for the percent distance from the south edge of the "
   echo -n "region to the $TOP of your barscale: "
   read SPERCENT
   if [ -z "$SPERCENT" ] ; then
     # clear
     echo ""
     continue
    else
     PERCENTY=`echo $CSOUTH $CNORTH $SPERCENT \
      | awk '{ spos = (( $3 / 100 ) * ( $2 - $1 )) + $1 ; printf "%0f", spos }'`
     case "$VERTALIGN"
      in
        t) BARBOT=`echo $PERCENTY $TOTALH | awk '{ barbot = $1 - $2
                printf "%0f", barbot }'`
           TEXTTOP=$PERCENTY;;
        c) BARBOT=`echo $PERCENTY $TOTALH | awk '{ barbot = $1 - ( .5 * $2 )
                printf "%0f", barbot }'`
           TEXTTOP=`echo $PERCENTY $TOTALH | awk '{ texttop = $1 + ( .5 * $2 )
                printf "%0f", texttop }'`;;
        b) BARBOT=$PERCENTY
           TEXTTOP=`echo $PERCENTY $TOTALH | awk '{ texttop = $1 + $2
                printf "%0f", texttop }'`;;
        *) echo "case statement error."
           exit 1;;
     esac

     if [ $BARBOT -lt $CSOUTH ] || [ $TEXTTOP -gt $CNORTH ] ; then
       echo ""
       echo "Barscale position is at least partially outside of the"
       echo "current region. Please pick new coordinates."
       continue
      else
       break
     fi
   fi
  done
fi

echo "ORGANIZATION: CAST" > $LOCATION/dig_ascii/$BARNAME
echo "DIGIT DATE:" >> $LOCATION/dig_ascii/$BARNAME
echo "DIGIT NAME:" >> $LOCATION/dig_ascii/$BARNAME
echo "MAP NAME: $BARNAME" >> $LOCATION/dig_ascii/$BARNAME
echo "MAP DATE: $DATE " >> $LOCATION/dig_ascii/$BARNAME
echo "MAP SCALE:    24000" >> $LOCATION/dig_ascii/$BARNAME
echo "OTHER INFO: Created with v.barscale.sh" >> $LOCATION/dig_ascii/$BARNAME
echo "ZONE:         $ZONE" >> $LOCATION/dig_ascii/$BARNAME
echo "WEST EDGE:    $CWEST" >> $LOCATION/dig_ascii/$BARNAME
echo "EAST EDGE:    $CEAST" >> $LOCATION/dig_ascii/$BARNAME
echo "SOUTH EDGE:   $CSOUTH" >> $LOCATION/dig_ascii/$BARNAME
echo "NORTH EDGE:   $CNORTH" >> $LOCATION/dig_ascii/$BARNAME
echo "MAP THRESH:   18.288" >> $LOCATION/dig_ascii/$BARNAME
echo "VERTI:" >> $LOCATION/dig_ascii/$BARNAME

ONESEG=`echo $SEGMENTS $UNITS $UNITNUM | awk '{ oneseg = ( $2 * $3 ) / $1 
  printf "%0f", oneseg }'`
BARTOP=`echo $BARBOT $BARHEIGHT | awk '{ bartop = $1 + $2 
  printf "%0f", bartop }'`
BARHALF=`echo $BARBOT $BARHEIGHT | awk '{ barhalf = $1 + ( $2 / 2 ) 
  printf "%0f", barhalf }'`
BARZERO=`echo $BARLEFT $UNITS $LEFTUNITS | awk '{ barzero = $1 + ( $2 * $3 )
  printf "%0f", barzero }'`

echo "L  4" >> $LOCATION/dig_ascii/$BARNAME
echo " $BARBOT $BARRIGHT" >> $LOCATION/dig_ascii/$BARNAME
echo " $BARBOT $BARLEFT" >> $LOCATION/dig_ascii/$BARNAME
echo " $BARTOP $BARLEFT" >> $LOCATION/dig_ascii/$BARNAME
echo " $BARTOP $BARRIGHT" >> $LOCATION/dig_ascii/$BARNAME

LASTSEG=$BARZERO
COUNT=1
while [ "$COUNT" -le "$SEGMENTS" ] ; do
 NEXTSEG=`echo $LASTSEG $ONESEG | awk '{ nextseg = $1 + $2 
    printf "%0f", nextseg }'`
 ODDEVEN=`expr $COUNT % 2 `
 if [ "$ODDEVEN" -eq 1 ] ; then
   echo "L  2" >> $LOCATION/dig_ascii/$BARNAME
   echo " $BARHALF $LASTSEG" >> $LOCATION/dig_ascii/$BARNAME
   echo " $BARHALF $NEXTSEG" >> $LOCATION/dig_ascii/$BARNAME
 fi
 echo "L  2" >> $LOCATION/dig_ascii/$BARNAME
 echo " $BARBOT $NEXTSEG" >> $LOCATION/dig_ascii/$BARNAME
 echo " $BARTOP $NEXTSEG" >> $LOCATION/dig_ascii/$BARNAME
 LASTSEG=$NEXTSEG
 COUNT=`expr $COUNT + 1`
done

# Build left end of barscale.

if [ $LEFTUNITS != 0 ] ; then
  ONELSEG=`echo $LEFTSEGS $UNITS $LEFTUNITS | awk '{ onelseg = ( $2 * $3 ) / $1
    printf "%0f", onelseg }'`
  LASTLSEG=$BARLEFT
  COUNT=1
  while [ "$COUNT" -le "$LEFTSEGS" ] ; do
   NEXTLSEG=`echo $LASTLSEG $ONELSEG | awk '{ nextlseg = $1 + $2
     printf "%0f", nextlseg }'`
   ODDEVEN=`expr $LEFTSEGS + $COUNT `
   ODDEVEN=`expr $ODDEVEN % 2 `
   if [ "$ODDEVEN" -eq 1 ] ; then
     echo "L  2" >> $LOCATION/dig_ascii/$BARNAME
     echo " $BARHALF $LASTLSEG" >> $LOCATION/dig_ascii/$BARNAME
     echo " $BARHALF $NEXTLSEG" >> $LOCATION/dig_ascii/$BARNAME
   fi
   echo "L  2" >> $LOCATION/dig_ascii/$BARNAME
   echo " $BARBOT $NEXTLSEG" >> $LOCATION/dig_ascii/$BARNAME
   echo " $BARTOP $NEXTLSEG" >> $LOCATION/dig_ascii/$BARNAME
   LASTLSEG=$NEXTLSEG
   COUNT=`expr $COUNT + 1`
  done
fi

v.in.ascii input=$BARNAME output=$BARNAME
rm $LOCATION/dig_ascii/$BARNAME
v.support -r $BARNAME

TEXTBOT=`echo $BARTOP $BARHEIGHT | awk '{ textbot = $1 + ( .5 * $2 ) 
  printf "%0f", textbot }'`
NUMSIZE=`echo -n $UNITNUM | wc -c | tr -d ' '`
OFFSET=`echo $BARRIGHT $FONTSIZE $NUMSIZE \
  | awk '{ offset = $1 + ((( .5 * $3 ) + 1 ) * $2 ) ; printf "%0f", offset }'`

if [ $LEFTUNITS != 0 ] ; then
  echo "text $BARLEFT $TEXTBOT $LEFTUNITS" > $WORKDIR/$SCRIPTFILE
  echo "font $FONT" >> $WORKDIR/$SCRIPTFILE
  echo "size $FONTSIZE" >> $WORKDIR/$SCRIPTFILE
  echo "background white" >> $WORKDIR/$SCRIPTFILE
  echo "ref lower center" >> $WORKDIR/$SCRIPTFILE
  echo "end" >> $WORKDIR/$SCRIPTFILE
fi
echo "text $BARZERO $TEXTBOT 0" >> $WORKDIR/$SCRIPTFILE
echo "font $FONT" >> $WORKDIR/$SCRIPTFILE
echo "size $FONTSIZE" >> $WORKDIR/$SCRIPTFILE
echo "background white" >> $WORKDIR/$SCRIPTFILE
echo "ref lower center" >> $WORKDIR/$SCRIPTFILE
echo "end" >> $WORKDIR/$SCRIPTFILE
echo "text $BARRIGHT $TEXTBOT $UNITNUM" >> $WORKDIR/$SCRIPTFILE
echo "font $FONT" >> $WORKDIR/$SCRIPTFILE
echo "size $FONTSIZE" >> $WORKDIR/$SCRIPTFILE
echo "background white" >> $WORKDIR/$SCRIPTFILE
echo "ref lower center" >> $WORKDIR/$SCRIPTFILE
echo "end" >> $WORKDIR/$SCRIPTFILE
echo "text $OFFSET $TEXTBOT $UNITNAME" >> $WORKDIR/$SCRIPTFILE
echo "font $FONT" >> $WORKDIR/$SCRIPTFILE
echo "size $FONTSIZE" >> $WORKDIR/$SCRIPTFILE
echo "background white" >> $WORKDIR/$SCRIPTFILE
echo "ref lower left" >> $WORKDIR/$SCRIPTFILE
echo "end" >> $WORKDIR/$SCRIPTFILE
echo "vect $BARNAME" >> $WORKDIR/$SCRIPTFILE
echo "color black" >> $WORKDIR/$SCRIPTFILE
echo "width $LINEWIDTH" >> $WORKDIR/$SCRIPTFILE
echo "masked n" >> $WORKDIR/$SCRIPTFILE
echo "end" >> $WORKDIR/$SCRIPTFILE

clear
echo "You will find a file called \"$SCRIPTFILE\" in your current directory."
echo "It includes ps.map instructions that you should add to your ps.map"
echo "input script."
echo ""

exit 0
